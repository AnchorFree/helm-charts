# Default values for cortex.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

cortex:
  env: []

  # Root of URL to generate if config is internal://monitor
  # cortex cli: -alertmanager.configs.auto-slack-root
  # alertmanager_configs_auto_slack_root:

  # Root of URL to generate if config is http://internal.monitor
  # cortex cli: -alertmanager.configs.auto-webhook-root
  # alertmanager_configs_auto_webhook_root:

  # Timeout for requests to Weave Cloud configs service. (default 5s)
  # cortex cli: -alertmanager.configs.client-timeout
  # alertmanager_configs_client_timeout:

  # Filename of fallback config to use if none specified for instance.
  # cortex cli: -alertmanager.configs.fallback
  # alertmanager_configs_fallback:

  # How frequently to poll Cortex configs (default 15s)
  # cortex cli: -alertmanager.configs.poll-interval
  # alertmanager_configs_poll_interval:

  # URL of configs API server.
  # cortex cli: -alertmanager.configs.url
  # alertmanager_configs_url:

  # MAC address, i.e. Mesh peer ID (default "02:42:ac:11:00:07")
  # cortex cli: -alertmanager.mesh.hardware-address
  # alertmanager_mesh_hardware_address:

  # Mesh listen address (default "0.0.0.0:6783")
  # cortex cli: -alertmanager.mesh.listen-address
  # alertmanager_mesh_listen_address:

  # Mesh peer nickname (default "a8b1123f5e8f")
  # cortex cli: -alertmanager.mesh.nickname
  # alertmanager_mesh_nickname:

  # Password to join the Mesh peer network (empty password disables encryption)
  # cortex cli: -alertmanager.mesh.password
  # alertmanager_mesh_password:

  # Hostname for mesh peers.
  # cortex cli: -alertmanager.mesh.peer.host
  # alertmanager_mesh_peer_host:

  # Period with which to poll DNS for mesh peers. (default 1m0s)
  # cortex cli: -alertmanager.mesh.peer.refresh-interval
  # alertmanager_mesh_peer_refresh_interval:

  # SRV service used to discover peers. (default "mesh")
  # cortex cli: -alertmanager.mesh.peer.service
  # alertmanager_mesh_peer_service:

  # Base path for data storage. (default "data/")
  # cortex cli: -alertmanager.storage.path
  # alertmanager_storage_path:

  # How long to keep data for. (default 120h0m0s)
  # cortex cli: -alertmanager.storage.retention
  # alertmanager_storage_retention:

  # The URL under which Alertmanager is externally reachable (for example, if
  # Alertmanager is served via a reverse proxy). Used for generating relative and
  # absolute links back to Alertmanager itself. If the URL has a path portion, it
  # will be used to prefix all HTTP endpoints served by Alertmanager. If omitted,
  # relevant URL components will be derived automatically.
  # cortex cli: -alertmanager.web.external-url
  alertmanager_web_external_url: /api/prom/alertmanager

  # log to standard error as well as files
  # cortex cli: -alsologtostderr
  # alsologtostderr:

  # ApplicationAutoscaling endpoint URL with escaped Key and Secret encoded.
  # cortex cli: -applicationautoscaling.url
  # applicationautoscaling_url:

  # The date (in the format YYYY-MM-DD) after which we use bigtable column keys.
  # cortex cli: -bigtable.column-key-from
  # bigtable_column_key_from:

  # gRPC client max receive message size (bytes). (default 104857600)
  # cortex cli: -bigtable.grpc-max-recv-msg-size
  # bigtable_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # cortex cli: -bigtable.grpc-max-send-msg-size
  # bigtable_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # cortex cli: -bigtable.grpc-use-gzip-compression
  # bigtable_grpc_use_gzip_compression:

  # Bigtable instance ID.
  # cortex cli: -bigtable.instance
  # bigtable_instance:

  # Bigtable project ID.
  # cortex cli: -bigtable.project
  # bigtable_project:

  # points to the billing ingester sidecar (should be on localhost) (default
  # "localhost:24225")
  # cortex cli: -billing.ingester
  # billing_ingester:

  # Maximum number of billing events to buffer in memory (default 1024)
  # cortex cli: -billing.max-buffered-events
  # billing_max_buffered_events:

  # How often to retry sending events to the billing ingester. (default 500ms)
  # cortex cli: -billing.retry-delay
  # billing_retry_delay:

  # Location of BoltDB index files.
  # cortex cli: -boltdb.dir
  # boltdb_dir:

  # Cache config for chunks. Enable on-disk cache.
  # cortex cli: -cache.enable-diskcache
  # cache_enable_diskcache:

  # Cache config for chunks. Enable in-memory cache.
  # cortex cli: -cache.enable-fifocache
  # cache_enable_fifocache:

  # Comma-separated hostnames or ips of Cassandra instances.
  # cortex cli: -cassandra.addresses
  # cassandra_addresses:

  # Enable password authentication when connecting to cassandra.
  # cortex cli: -cassandra.auth
  # cassandra_auth:

  # Path to certificate file to verify the peer.
  # cortex cli: -cassandra.ca-path
  # cassandra_ca_path:

  # Consistency level for Cassandra. (default "QUORUM")
  # cortex cli: -cassandra.consistency
  # cassandra_consistency:

  # Instruct the cassandra driver to not attempt to get host info from the
  # system.peers table.
  # cortex cli: -cassandra.disable-initial-host-lookup
  # cassandra_disable_initial_host_lookup:

  # Require SSL certificate validation. (default true)
  # cortex cli: -cassandra.host-verification
  # cassandra_host_verification:

  # Keyspace to use in Cassandra.
  # cortex cli: -cassandra.keyspace
  # cassandra_keyspace:

  # Password to use when connecting to cassandra.
  # cortex cli: -cassandra.password
  # cassandra_password:

  # Port that Cassandra is running on (default 9042)
  # cortex cli: -cassandra.port
  # cassandra_port:

  # Replication factor to use in Cassandra. (default 1)
  # cortex cli: -cassandra.replication-factor
  # cassandra_replication_factor:

  # Use SSL when connecting to cassandra instances.
  # cortex cli: -cassandra.ssl
  # cassandra_ssl:

  # Timeout when connecting to cassandra. (default 600ms)
  # cortex cli: -cassandra.timeout
  # cassandra_timeout:

  # Username to use when connecting to cassandra.
  # cortex cli: -cassandra.username
  # cassandra_username:

  # Which storage client to use (aws, gcp, cassandra, inmemory). (default "aws")
  # cortex cli: -chunk.storage-client
  # chunk_storage_client:

  # Schema config yaml
  # cortex cli: -config-yaml
  # config_yaml:

  # ACL Token used to interact with Consul.
  # cortex cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # cortex cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # cortex cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # cortex cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # cortex cli: -consul.prefix
  # consul_prefix:

  # Path where the database migration files can be found
  # cortex cli: -database.migrations
  database_migrations: "/migrations"

  # File containing password (username goes in URI)
  # cortex cli: -database.password-file
  # database_password_file:

  # URI where the database can be found (for dev you can use memory://) (default
  # "postgres://postgres@configs-db.weave.local/configs?sslmode=disable")
  # cortex cli: -database.uri
  # database_uri:

  # Cache config for chunks. The default validity of entries for caches unless
  # overridden.
  # cortex cli: -default-validity
  # default_validity:

  # Cache config for chunks. Path to file used to cache chunks. (default
  # "/var/run/chunks")
  # cortex cli: -diskcache.path
  # diskcache_path:

  # Cache config for chunks. Size of file (bytes) (default 1073741824)
  # cortex cli: -diskcache.size
  # diskcache_size:

  # How frequently to clean up clients for ingesters that have gone away. (default
  # 15s)
  # cortex cli: -distributor.client-cleanup-period
  # distributor_client_cleanup_period:

  # Report number of ingested samples to billing system.
  # cortex cli: -distributor.enable-billing
  # distributor_enable_billing:

  # Time to wait before sending more than the minimum successful query requests.
  # cortex cli: -distributor.extra-query-delay
  # distributor_extra_query_delay:

  # Run a health check on each ingester client during periodic cleanup.
  # cortex cli: -distributor.health-check-ingesters
  # distributor_health_check_ingesters:

  # Per-user allowed ingestion burst size (in number of samples). Warning, very
  # high limits will be reset every -distributor.limiter-reload-period. (default
  # 50000)
  # cortex cli: -distributor.ingestion-burst-size
  # distributor_ingestion_burst_size:

  # Per-user ingestion rate limit in samples per second. (default 25000)
  # cortex cli: -distributor.ingestion-rate-limit
  # distributor_ingestion_rate_limit:

  # Period at which to reload user ingestion limits. (default 5m0s)
  # cortex cli: -distributor.limiter-reload-period
  # distributor_limiter_reload_period:

  # Timeout for downstream ingesters. (default 2s)
  # cortex cli: -distributor.remote-timeout
  # distributor_remote_timeout:

  # The number of ingesters to write to and read from. (default 3)
  # cortex cli: -distributor.replication-factor
  distributor_replication_factor: 1

  # Distribute samples based on all labels, as opposed to solely by user and metric
  # name.
  # cortex cli: -distributor.shard-by-all-labels
  # distributor_shard_by_all_labels:

  # DynamoDB table management requests per second limit. (default 2)
  # cortex cli: -dynamodb.api-limit
  # dynamodb_api_limit:

  # The date (in the format YYYY-MM-DD) after which we will stop querying to non-
  # base64 encoded values.
  # cortex cli: -dynamodb.base64-buckets-from
  # dynamodb_base64_buckets_from:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # cortex cli: -dynamodb.chunk-table.enable-ondemand-throughput-mode
  # dynamodb_chunk_table_enable_ondemand_throughput_mode:

  # Date after which to write chunks to DynamoDB.
  # cortex cli: -dynamodb.chunk-table.from
  # dynamodb_chunk_table_from:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # cortex cli: -dynamodb.chunk-table.inactive-enable-ondemand-throughput-mode
  # dynamodb_chunk_table_inactive_enable_ondemand_throughput_mode:

  # DynamoDB table read throughput for inactive tables. (default 300)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput
  # dynamodb_chunk_table_inactive_read_throughput:

  # Number of last inactive tables to enable read autoscale. (default 4)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale-last-n
  # dynamodb_chunk_table_inactive_read_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.enabled
  # dynamodb_chunk_table_inactive_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.in-cooldown
  # dynamodb_chunk_table_inactive_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.max-capacity
  # dynamodb_chunk_table_inactive_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.min-capacity
  # dynamodb_chunk_table_inactive_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.out-cooldown
  # dynamodb_chunk_table_inactive_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.role-arn
  # dynamodb_chunk_table_inactive_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.chunk-table.inactive-read-throughput.scale.target-value
  # dynamodb_chunk_table_inactive_read_throughput_scale_target_value:

  # DynamoDB table write throughput for inactive tables. (default 1)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput
  # dynamodb_chunk_table_inactive_write_throughput:

  # Number of last inactive tables to enable write autoscale. (default 4)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale-last-n
  # dynamodb_chunk_table_inactive_write_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.enabled
  # dynamodb_chunk_table_inactive_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.in-cooldown
  # dynamodb_chunk_table_inactive_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.max-capacity
  # dynamodb_chunk_table_inactive_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.min-capacity
  # dynamodb_chunk_table_inactive_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.out-cooldown
  # dynamodb_chunk_table_inactive_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.role-arn
  # dynamodb_chunk_table_inactive_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.chunk-table.inactive-write-throughput.scale.target-value
  # dynamodb_chunk_table_inactive_write_throughput_scale_target_value:

  # DynamoDB table period. (default 168h0m0s)
  # cortex cli: -dynamodb.chunk-table.period
  # dynamodb_chunk_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_chunks_")
  # cortex cli: -dynamodb.chunk-table.prefix
  # dynamodb_chunk_table_prefix:

  # DynamoDB table default read throughput. (default 300)
  # cortex cli: -dynamodb.chunk-table.read-throughput
  # dynamodb_chunk_table_read_throughput:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.enabled
  # dynamodb_chunk_table_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.in-cooldown
  # dynamodb_chunk_table_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.max-capacity
  # dynamodb_chunk_table_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.min-capacity
  # dynamodb_chunk_table_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.out-cooldown
  # dynamodb_chunk_table_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.role-arn
  # dynamodb_chunk_table_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.chunk-table.read-throughput.scale.target-value
  # dynamodb_chunk_table_read_throughput_scale_target_value:

  # Tag (of the form key=value) to be added to all tables under management.
  # cortex cli: -dynamodb.chunk-table.tag
  # dynamodb_chunk_table_tag:

  # DynamoDB table default write throughput. (default 3000)
  # cortex cli: -dynamodb.chunk-table.write-throughput
  # dynamodb_chunk_table_write_throughput:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.enabled
  # dynamodb_chunk_table_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.in-cooldown
  # dynamodb_chunk_table_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.max-capacity
  # dynamodb_chunk_table_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.min-capacity
  # dynamodb_chunk_table_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.out-cooldown
  # dynamodb_chunk_table_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.role-arn
  # dynamodb_chunk_table_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.chunk-table.write-throughput.scale.target-value
  # dynamodb_chunk_table_write_throughput_scale_target_value:

  # Number of chunks to group together to parallelise fetches (zero to disable)
  # (default 10)
  # cortex cli: -dynamodb.chunk.gang.size
  # dynamodb_chunk_gang_size:

  # Max number of chunk-get operations to start in parallel (default 32)
  # cortex cli: -dynamodb.chunk.get.max.parallelism
  # dynamodb_chunk_get_max_parallelism:

  # The date (in the format YYYY-MM-DD) of the first day for which DynamoDB index
  # buckets should be day-sized vs. hour-sized.
  # cortex cli: -dynamodb.daily-buckets-from
  # dynamodb_daily_buckets_from:

  # Maximum backoff time (default 50s)
  # cortex cli: -dynamodb.max-backoff
  # dynamodb_max_backoff:

  # Maximum number of times to retry an operation (default 20)
  # cortex cli: -dynamodb.max-retries
  # dynamodb_max_retries:

  # Minimum backoff time (default 100ms)
  # cortex cli: -dynamodb.min-backoff
  # dynamodb_min_backoff:

  # The name of the DynamoDB table used before versioned schemas were introduced.
  # (default "cortex")
  # cortex cli: -dynamodb.original-table-name
  # dynamodb_original_table_name:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # cortex cli: -dynamodb.periodic-table.enable-ondemand-throughput-mode
  # dynamodb_periodic_table_enable_ondemand_throughput_mode:

  # Date after which to use periodic tables.
  # cortex cli: -dynamodb.periodic-table.from
  # dynamodb_periodic_table_from:

  # DynamoDB periodic tables grace period (duration which table will be
  # created/deleted before/after it's needed). (default 10m0s)
  # cortex cli: -dynamodb.periodic-table.grace-period
  # dynamodb_periodic_table_grace_period:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # cortex cli: -dynamodb.periodic-table.inactive-enable-ondemand-throughput-mode
  # dynamodb_periodic_table_inactive_enable_ondemand_throughput_mode:

  # DynamoDB table read throughput for inactive tables. (default 300)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput
  # dynamodb_periodic_table_inactive_read_throughput:

  # Number of last inactive tables to enable read autoscale. (default 4)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale-last-n
  # dynamodb_periodic_table_inactive_read_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.enabled
  # dynamodb_periodic_table_inactive_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.in-cooldown
  # dynamodb_periodic_table_inactive_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.max-capacity
  # dynamodb_periodic_table_inactive_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.min-capacity
  # dynamodb_periodic_table_inactive_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.out-cooldown
  # dynamodb_periodic_table_inactive_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.role-arn
  # dynamodb_periodic_table_inactive_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.periodic-table.inactive-read-throughput.scale.target-value
  # dynamodb_periodic_table_inactive_read_throughput_scale_target_value:

  # DynamoDB table write throughput for inactive tables. (default 1)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput
  # dynamodb_periodic_table_inactive_write_throughput:

  # Number of last inactive tables to enable write autoscale. (default 4)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale-last-n
  # dynamodb_periodic_table_inactive_write_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.enabled
  # dynamodb_periodic_table_inactive_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.in-cooldown
  # dynamodb_periodic_table_inactive_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.max-capacity
  # dynamodb_periodic_table_inactive_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.min-capacity
  # dynamodb_periodic_table_inactive_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.out-cooldown
  # dynamodb_periodic_table_inactive_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.role-arn
  # dynamodb_periodic_table_inactive_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.periodic-table.inactive-write-throughput.scale.target-value
  # dynamodb_periodic_table_inactive_write_throughput_scale_target_value:

  # DynamoDB table period. (default 168h0m0s)
  # cortex cli: -dynamodb.periodic-table.period
  # dynamodb_periodic_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_")
  # cortex cli: -dynamodb.periodic-table.prefix
  # dynamodb_periodic_table_prefix:

  # DynamoDB table default read throughput. (default 300)
  # cortex cli: -dynamodb.periodic-table.read-throughput
  # dynamodb_periodic_table_read_throughput:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.enabled
  # dynamodb_periodic_table_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.in-cooldown
  # dynamodb_periodic_table_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.max-capacity
  # dynamodb_periodic_table_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.min-capacity
  # dynamodb_periodic_table_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.out-cooldown
  # dynamodb_periodic_table_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.role-arn
  # dynamodb_periodic_table_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.periodic-table.read-throughput.scale.target-value
  # dynamodb_periodic_table_read_throughput_scale_target_value:

  # Tag (of the form key=value) to be added to all tables under management.
  # cortex cli: -dynamodb.periodic-table.tag
  # dynamodb_periodic_table_tag:

  # DynamoDB table default write throughput. (default 3000)
  # cortex cli: -dynamodb.periodic-table.write-throughput
  # dynamodb_periodic_table_write_throughput:

  # Should we enable autoscale for the table.
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.enabled
  # dynamodb_periodic_table_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.in-cooldown
  # dynamodb_periodic_table_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.max-capacity
  # dynamodb_periodic_table_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.min-capacity
  # dynamodb_periodic_table_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.out-cooldown
  # dynamodb_periodic_table_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.role-arn
  # dynamodb_periodic_table_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # cortex cli: -dynamodb.periodic-table.write-throughput.scale.target-value
  # dynamodb_periodic_table_write_throughput_scale_target_value:

  # How frequently to poll DynamoDB to learn our capacity. (default 2m0s)
  # cortex cli: -dynamodb.poll-interval
  # dynamodb_poll_interval:

  # DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<table-
  # name> to use a mock in-memory implementation.
  # cortex cli: -dynamodb.url
  # dynamodb_url:

  # Should we use periodic tables.
  # cortex cli: -dynamodb.use-periodic-tables
  # dynamodb_use_periodic_tables:

  # The date (in the format YYYY-MM-DD) after which we enable v4 schema.
  # cortex cli: -dynamodb.v4-schema-from
  # dynamodb_v4_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v5 schema.
  # cortex cli: -dynamodb.v5-schema-from
  # dynamodb_v5_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v6 schema.
  # cortex cli: -dynamodb.v6-schema-from
  # dynamodb_v6_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v9 schema (Series
  # indexing).
  # cortex cli: -dynamodb.v9-schema-from
  # dynamodb_v9_schema_from:

  # How often to sample observability events (0 = never).
  # cortex cli: -event.sample-rate
  # event_sample_rate:

  # Cache config for chunks. The expiry duration for the cache.
  # cortex cli: -fifocache.duration
  # fifocache_duration:

  # Cache config for chunks. The number of entries to cache.
  # cortex cli: -fifocache.size
  # fifocache_size:

  # Most recent allowed cacheable result, to prevent caching very recent results
  # that might still be in flux. (default 1m0s)
  # cortex cli: -frontend.max-cache-freshness
  # frontend_max_cache_freshness:

  # Name of GCS bucket to put chunks in.
  # cortex cli: -gcs.bucketname
  # gcs_bucketname:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # cortex cli: -httptest.serve
  # httptest_serve:

  # Expected number of labels per timeseries, used for preallocations. (default 20)
  # cortex cli: -ingester-client.expected-labels
  # ingester_client_expected_labels:

  # Expected number of samples per timeseries, used for preallocations. (default
  # 10)
  # cortex cli: -ingester-client.expected-samples-per-series
  # ingester_client_expected_samples_per_series:

  # Expected number of timeseries per request, use for preallocations. (default
  # 100)
  # cortex cli: -ingester-client.expected-timeseries
  # ingester_client_expected_timeseries:

  # ID to register into consul. (default "097bbb98e94d")
  # cortex cli: -ingester.ID
  # ingester_ID:

  # IP address to advertise in consul.
  # cortex cli: -ingester.addr
  # ingester_addr:

  # Range of time to subtract from MaxChunkAge to spread out flushes (default
  # 20m0s)
  # cortex cli: -ingester.chunk-age-jitter
  # ingester_chunk_age_jitter:

  # Encoding version to use for chunks. (default 1)
  # cortex cli: -ingester.chunk-encoding
  # ingester_chunk_encoding:

  # Send chunks to PENDING ingesters on exit.
  # cortex cli: -ingester.claim-on-rollout
  ingester_claim_on_rollout: "false"

  # gRPC client max receive message size (bytes). (default 104857600)
  # cortex cli: -ingester.client.grpc-max-recv-msg-size
  # ingester_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # cortex cli: -ingester.client.grpc-max-send-msg-size
  # ingester_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # cortex cli: -ingester.client.grpc-use-gzip-compression
  # ingester_client_grpc_use_gzip_compression:

  # Number of concurrent goroutines flushing to dynamodb. (default 50)
  # cortex cli: -ingester.concurrent-flushes
  # ingester_concurrent_flushes:

  # Timeout for individual flush operations. (default 1m0s)
  # cortex cli: -ingester.flush-op-timeout
  # ingester_flush_op_timeout:

  # Period with which to attempt to flush chunks. (default 1m0s)
  # cortex cli: -ingester.flush-period
  # ingester_flush_period:

  # Period at which to heartbeat to consul. (default 5s)
  # cortex cli: -ingester.heartbeat-period
  # ingester_heartbeat_period:

  # Name of network interface to read address from. (default [eth0 en0])
  # cortex cli: -ingester.interface
  # ingester_interface:

  # Period to wait for a claim from another ingester; will join automatically after
  # this.
  # cortex cli: -ingester.join-after
  ingester_join_after: "30s"

  # Maximum chunk age before flushing. (default 12h0m0s)
  # cortex cli: -ingester.max-chunk-age
  # ingester_max_chunk_age:

  # Maximum chunk idle time before flushing. (default 5m0s)
  # cortex cli: -ingester.max-chunk-idle
  # ingester_max_chunk_idle:

  # Limit on the number of concurrent streams for gRPC calls (0 = unlimited)
  # (default 1000)
  # cortex cli: -ingester.max-concurrent-streams
  # ingester_max_concurrent_streams:

  # The maximum number of samples that a query can return. (default 1000000)
  # cortex cli: -ingester.max-samples-per-query
  # ingester_max_samples_per_query:

  # Maximum number of active series per metric name. (default 50000)
  # cortex cli: -ingester.max-series-per-metric
  # ingester_max_series_per_metric:

  # The maximum number of series that a query can return. (default 100000)
  # cortex cli: -ingester.max-series-per-query
  # ingester_max_series_per_query:

  # Maximum number of active series per user. (default 5000000)
  # cortex cli: -ingester.max-series-per-user
  # ingester_max_series_per_user:

  # Minimum duration to wait before becoming ready. This is to work around race
  # conditions with ingesters exiting and updating the ring. (default 1m0s)
  # cortex cli: -ingester.min-ready-duration
  # ingester_min_ready_duration:

  # Store tokens in a normalised fashion to reduce allocations.
  # cortex cli: -ingester.normalise-tokens
  # ingester_normalise_tokens:

  # Number of tokens for each ingester. (default 128)
  # cortex cli: -ingester.num-tokens
  # ingester_num_tokens:

  # port to advertise in consul (defaults to server.grpc-listen-port).
  # cortex cli: -ingester.port
  # ingester_port:

  # Period with which to update the per-user ingestion rates. (default 15s)
  # cortex cli: -ingester.rate-update-period
  # ingester_rate_update_period:

  # Period chunks will remain in memory after flushing. (default 5m0s)
  # cortex cli: -ingester.retain-period
  # ingester_retain_period:

  # Time to spend searching for a pending ingester when shutting down. (default
  # 30s)
  # cortex cli: -ingester.search-pending-for
  # ingester_search_pending_for:

  # File name of per-user overrides.
  # cortex cli: -limits.per-user-override-config
  # limits_per_user_override_config:

  # Period with this to reload the overrides. (default 10s)
  # cortex cli: -limits.per-user-override-period
  # limits_per_user_override_period:

  # Directory to store chunks in.
  # cortex cli: -local.chunk-directory
  # local_chunk_directory:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # cortex cli: -log.level
  log_level: info

  # when logging hits line file:N, emit a stack trace
  # cortex cli: -log_backtrace_at
  # log_backtrace_at:

  # If non-empty, write log files in this directory
  # cortex cli: -log_dir
  # log_dir:

  # log to standard error instead of files
  # cortex cli: -logtostderr
  # logtostderr:

  # Cache config for chunks. How many chunks to buffer for background write back.
  # (default 10000)
  # cortex cli: -memcache.write-back-buffer
  # memcache_write_back_buffer:

  # Cache config for chunks. How many goroutines to use to write back to memcache.
  # (default 10)
  # cortex cli: -memcache.write-back-goroutines
  # memcache_write_back_goroutines:

  # Cache config for chunks. How many keys to fetch in each batch.
  # cortex cli: -memcached.batchsize
  # memcached_batchsize:

  # Cache config for chunks. How long keys stay in the memcache.
  # cortex cli: -memcached.expiration
  # memcached_expiration:

  # Cache config for chunks. Hostname for memcached service to use when caching
  # chunks. If empty, no memcached will be used.
  # cortex cli: -memcached.hostname
  # memcached_hostname:

  # Cache config for chunks. Maximum number of idle connections in pool. (default
  # 16)
  # cortex cli: -memcached.max-idle-conns
  # memcached_max_idle_conns:

  # Cache config for chunks. Maximum active requests to memcache. (default 100)
  # cortex cli: -memcached.parallelism
  # memcached_parallelism:

  # Cache config for chunks. SRV service used to discover memcache servers.
  # (default "memcached")
  # cortex cli: -memcached.service
  # memcached_service:

  # Cache config for chunks. Maximum time to wait before giving up on memcached
  # requests. (default 100ms)
  # cortex cli: -memcached.timeout
  # memcached_timeout:

  # Cache config for chunks. Period with which to poll DNS for memcache servers.
  # (default 1m0s)
  # cortex cli: -memcached.update-interval
  # memcached_update_interval:

  # query to fetch error rates per table (default "sum(rate(cortex_dynamo_failures_
  # total{error="ProvisionedThroughputExceededException",operation=~".*Write.*"}[1m
  # ])) by (table) > 0")
  # cortex cli: -metrics.error-rate-query
  # metrics_error_rate_query:

  # query to fetch ingester queue length (default "sum(avg_over_time(cortex_ingeste
  # r_flush_queue_length{job="cortex/ingester"}[2m]))")
  # cortex cli: -metrics.queue-length-query
  # metrics_queue_length_query:

  # query to fetch read errors per table (default "sum(increase(cortex_dynamo_failu
  # res_total{operation="DynamoDB.QueryPages",error="ProvisionedThroughputExceededE
  # xception"}[1m])) by (table) > 0")
  # cortex cli: -metrics.read-error-query
  # metrics_read_error_query:

  # query to fetch read capacity usage per table (default "sum(rate(cortex_dynamo_c
  # onsumed_capacity_total{operation="DynamoDB.QueryPages"}[1h])) by (table) > 0")
  # cortex cli: -metrics.read-usage-query
  # metrics_read_usage_query:

  # Scale up capacity by this multiple (default 1.3)
  # cortex cli: -metrics.scale-up-factor
  # metrics_scale_up_factor:

  # Queue length above which we will scale up capacity (default 100000)
  # cortex cli: -metrics.target-queue-length
  # metrics_target_queue_length:

  # Use metrics-based autoscaling, via this query URL
  # cortex cli: -metrics.url
  # metrics_url:

  # query to fetch write capacity usage per table (default "sum(rate(cortex_dynamo_
  # consumed_capacity_total{operation="DynamoDB.BatchWriteItem"}[15m])) by (table)
  # > 0")
  # cortex cli: -metrics.usage-query
  # metrics_usage_query:

  # Time since the last sample after which a time series is considered stale and
  # ignored by expression evaluations. (default 5m0s)
  # cortex cli: -promql.lookback-delta
  # promql_lookback_delta:

  # Mutate incoming queries to align their start and end with their step.
  # cortex cli: -querier.align-querier-with-step
  # querier_align_querier_with_step:

  # Use batch iterators to execute query, as opposed to fully materialising the
  # series in memory.  Takes precedent over the -querier.iterators flag.
  # cortex cli: -querier.batch-iterators
  # querier_batch_iterators:

  # Cache query results.
  # cortex cli: -querier.cache-results
  # querier_cache_results:

  # How often to query DNS. (default 10s)
  # cortex cli: -querier.dns-lookup-period
  # querier_dns_lookup_period:

  # Address of query frontend service.
  # cortex cli: -querier.frontend-address
  # querier_frontend_address:

  # gRPC client max receive message size (bytes). (default 104857600)
  # cortex cli: -querier.frontend-client.grpc-max-recv-msg-size
  # querier_frontend_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # cortex cli: -querier.frontend-client.grpc-max-send-msg-size
  # querier_frontend_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # cortex cli: -querier.frontend-client.grpc-use-gzip-compression
  # querier_frontend_client_grpc_use_gzip_compression:

  # Use streaming RPCs to query ingester.
  # cortex cli: -querier.ingester-streaming
  # querier_ingester_streaming:

  # Use iterators to execute query, as opposed to fully materialising the series in
  # memory.
  # cortex cli: -querier.iterators
  # querier_iterators:

  # The maximum number of concurrent queries. (default 20)
  # cortex cli: -querier.max-concurrent
  # querier_max_concurrent:

  # Maximum number of outstanding requests per tenant per frontend; requests beyond
  # this error with HTTP 429. (default 100)
  # cortex cli: -querier.max-outstanding-requests-per-tenant
  # querier_max_outstanding_requests_per_tenant:

  # Maximum number of retries for a single request; beyond this, the downstream
  # error is returned. (default 5)
  # cortex cli: -querier.max-retries-per-request
  # querier_max_retries_per_request:

  # Maximum number of samples a single query can load into memory. (default
  # 50000000)
  # cortex cli: -querier.max-samples
  # querier_max_samples:

  # Maximum lookback beyond which queries are not sent to ingester. 0 means all
  # queries are sent to ingester.
  # cortex cli: -querier.query-ingesters-within
  # querier_query_ingesters_within:

  # Max subqueries run in parallel per higher-level query. (default 100)
  # cortex cli: -querier.query-parallelism
  # querier_query_parallelism:

  # Split queries by day and execute in parallel.
  # cortex cli: -querier.split-queries-by-day
  # querier_split_queries_by_day:

  # The timeout for a query. (default 2m0s)
  # cortex cli: -querier.timeout
  # querier_timeout:

  # Number of simultaneous queries to process. (default 10)
  # cortex cli: -querier.worker-parallelism
  # querier_worker_parallelism:

  # Limit on the size of a grpc message this server can receive. (default 67108864)
  # cortex cli: -query-frontend.max-recv-message-size-bytes
  # query_frontend_max_recv_message_size_bytes:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # cortex cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # cortex cli: -ring.store
  # ring_store:

  # Use DNS SRV records to discover alertmanager hosts.
  # cortex cli: -ruler.alertmanager-discovery
  # ruler_alertmanager_discovery:

  # How long to wait between refreshing alertmanager hosts. (default 1m0s)
  # cortex cli: -ruler.alertmanager-refresh-interval
  # ruler_alertmanager_refresh_interval:

  # URL of the Alertmanager to send notifications to.
  # cortex cli: -ruler.alertmanager-url
  # ruler_alertmanager_url:

  # How frequently to evaluate rules (default 15s)
  # cortex cli: -ruler.evaluation-interval
  # ruler_evaluation_interval:

  # URL of alerts return path.
  # cortex cli: -ruler.external.url
  # ruler_external_url:

  # Timeout for rule group evaluation, including sending result to ingester
  # (default 10s)
  # cortex cli: -ruler.group-timeout
  # ruler_group_timeout:

  # Capacity of the queue for notifications to be sent to the Alertmanager.
  # (default 10000)
  # cortex cli: -ruler.notification-queue-capacity
  # ruler_notification_queue_capacity:

  # HTTP timeout duration when sending notifications to the Alertmanager. (default
  # 10s)
  # cortex cli: -ruler.notification-timeout
  # ruler_notification_timeout:

  # Number of rule evaluator worker routines in this process (default 1)
  # cortex cli: -ruler.num-workers
  # ruler_num_workers:

  # S3 endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<bucket-
  # name> to use a mock in-memory implementation.
  # cortex cli: -s3.url
  # s3_url:

  # Timeout for graceful shutdowns (default 30s)
  # cortex cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # cortex cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # cortex cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # cortex cli: -server.http-listen-port
  server_http_listen_port: 80

  # Read timeout for HTTP server (default 30s)
  # cortex cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # cortex cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # cortex cli: -server.register-instrumentation
  # server_register_instrumentation:

  # logs at or above this threshold go to stderr
  # cortex cli: -stderrthreshold
  # stderrthreshold:

  # When using bigchunk encoding, start a new bigchunk if over this size (0 =
  # unlimited)
  # cortex cli: -store.bigchunk-size-cap-bytes
  # store_bigchunk_size_cap_bytes:

  # Cache index entries older than this period. 0 to disable.
  # cortex cli: -store.cache-lookups-older-than
  # store_cache_lookups_older_than:

  # Size of in-memory cardinality cache, 0 to disable.
  # cortex cli: -store.cardinality-cache-size
  # store_cardinality_cache_size:

  # Period for which entries in the cardinality cache are valid. (default 1h0m0s)
  # cortex cli: -store.cardinality-cache-validity
  # store_cardinality_cache_validity:

  # Cardinality limit for index queries. (default 100000)
  # cortex cli: -store.cardinality-limit
  # store_cardinality_limit:

  # When saving varbit chunks, pad to 1024 bytes (default true)
  # cortex cli: -store.fullsize-chunks
  # store_fullsize_chunks:

  # Cache config for index entry reading. Enable on-disk cache.
  # cortex cli: -store.index-cache-read.cache.enable-diskcache
  # store_index_cache_read_cache_enable_diskcache:

  # Cache config for index entry reading. Enable in-memory cache.
  # cortex cli: -store.index-cache-read.cache.enable-fifocache
  # store_index_cache_read_cache_enable_fifocache:

  # Cache config for index entry reading. The default validity of entries for
  # caches unless overridden.
  # cortex cli: -store.index-cache-read.default-validity
  # store_index_cache_read_default_validity:

  # Cache config for index entry reading. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # cortex cli: -store.index-cache-read.diskcache.path
  # store_index_cache_read_diskcache_path:

  # Cache config for index entry reading. Size of file (bytes) (default 1073741824)
  # cortex cli: -store.index-cache-read.diskcache.size
  # store_index_cache_read_diskcache_size:

  # Cache config for index entry reading. The expiry duration for the cache.
  # cortex cli: -store.index-cache-read.fifocache.duration
  # store_index_cache_read_fifocache_duration:

  # Cache config for index entry reading. The number of entries to cache.
  # cortex cli: -store.index-cache-read.fifocache.size
  # store_index_cache_read_fifocache_size:

  # Cache config for index entry reading. How many chunks to buffer for background
  # write back. (default 10000)
  # cortex cli: -store.index-cache-read.memcache.write-back-buffer
  # store_index_cache_read_memcache_write_back_buffer:

  # Cache config for index entry reading. How many goroutines to use to write back
  # to memcache. (default 10)
  # cortex cli: -store.index-cache-read.memcache.write-back-goroutines
  # store_index_cache_read_memcache_write_back_goroutines:

  # Cache config for index entry reading. How many keys to fetch in each batch.
  # cortex cli: -store.index-cache-read.memcached.batchsize
  # store_index_cache_read_memcached_batchsize:

  # Cache config for index entry reading. How long keys stay in the memcache.
  # cortex cli: -store.index-cache-read.memcached.expiration
  # store_index_cache_read_memcached_expiration:

  # Cache config for index entry reading. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # cortex cli: -store.index-cache-read.memcached.hostname
  # store_index_cache_read_memcached_hostname:

  # Cache config for index entry reading. Maximum number of idle connections in
  # pool. (default 16)
  # cortex cli: -store.index-cache-read.memcached.max-idle-conns
  # store_index_cache_read_memcached_max_idle_conns:

  # Cache config for index entry reading. Maximum active requests to memcache.
  # (default 100)
  # cortex cli: -store.index-cache-read.memcached.parallelism
  # store_index_cache_read_memcached_parallelism:

  # Cache config for index entry reading. SRV service used to discover memcache
  # servers. (default "memcached")
  # cortex cli: -store.index-cache-read.memcached.service
  # store_index_cache_read_memcached_service:

  # Cache config for index entry reading. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # cortex cli: -store.index-cache-read.memcached.timeout
  # store_index_cache_read_memcached_timeout:

  # Cache config for index entry reading. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # cortex cli: -store.index-cache-read.memcached.update-interval
  # store_index_cache_read_memcached_update_interval:

  # Cache validity for active index entries. Should be no higher than
  # -ingester.max-chunk-idle. (default 5m0s)
  # cortex cli: -store.index-cache-validity
  # store_index_cache_validity:

  # Cache config for index entry writing. Enable on-disk cache.
  # cortex cli: -store.index-cache-write.cache.enable-diskcache
  # store_index_cache_write_cache_enable_diskcache:

  # Cache config for index entry writing. Enable in-memory cache.
  # cortex cli: -store.index-cache-write.cache.enable-fifocache
  # store_index_cache_write_cache_enable_fifocache:

  # Cache config for index entry writing. The default validity of entries for
  # caches unless overridden.
  # cortex cli: -store.index-cache-write.default-validity
  # store_index_cache_write_default_validity:

  # Cache config for index entry writing. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # cortex cli: -store.index-cache-write.diskcache.path
  # store_index_cache_write_diskcache_path:

  # Cache config for index entry writing. Size of file (bytes) (default 1073741824)
  # cortex cli: -store.index-cache-write.diskcache.size
  # store_index_cache_write_diskcache_size:

  # Cache config for index entry writing. The expiry duration for the cache.
  # cortex cli: -store.index-cache-write.fifocache.duration
  # store_index_cache_write_fifocache_duration:

  # Cache config for index entry writing. The number of entries to cache.
  # cortex cli: -store.index-cache-write.fifocache.size
  # store_index_cache_write_fifocache_size:

  # Cache config for index entry writing. How many chunks to buffer for background
  # write back. (default 10000)
  # cortex cli: -store.index-cache-write.memcache.write-back-buffer
  # store_index_cache_write_memcache_write_back_buffer:

  # Cache config for index entry writing. How many goroutines to use to write back
  # to memcache. (default 10)
  # cortex cli: -store.index-cache-write.memcache.write-back-goroutines
  # store_index_cache_write_memcache_write_back_goroutines:

  # Cache config for index entry writing. How many keys to fetch in each batch.
  # cortex cli: -store.index-cache-write.memcached.batchsize
  # store_index_cache_write_memcached_batchsize:

  # Cache config for index entry writing. How long keys stay in the memcache.
  # cortex cli: -store.index-cache-write.memcached.expiration
  # store_index_cache_write_memcached_expiration:

  # Cache config for index entry writing. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # cortex cli: -store.index-cache-write.memcached.hostname
  # store_index_cache_write_memcached_hostname:

  # Cache config for index entry writing. Maximum number of idle connections in
  # pool. (default 16)
  # cortex cli: -store.index-cache-write.memcached.max-idle-conns
  # store_index_cache_write_memcached_max_idle_conns:

  # Cache config for index entry writing. Maximum active requests to memcache.
  # (default 100)
  # cortex cli: -store.index-cache-write.memcached.parallelism
  # store_index_cache_write_memcached_parallelism:

  # Cache config for index entry writing. SRV service used to discover memcache
  # servers. (default "memcached")
  # cortex cli: -store.index-cache-write.memcached.service
  # store_index_cache_write_memcached_service:

  # Cache config for index entry writing. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # cortex cli: -store.index-cache-write.memcached.timeout
  # store_index_cache_write_memcached_timeout:

  # Cache config for index entry writing. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # cortex cli: -store.index-cache-write.memcached.update-interval
  # store_index_cache_write_memcached_update_interval:

  # Limit to length of chunk store queries, 0 to disable.
  # cortex cli: -store.max-query-length
  # store_max_query_length:

  # Minimum time between chunk update and being saved to the store.
  # cortex cli: -store.min-chunk-age
  # store_min_chunk_age:

  # Maximum number of chunks that can be fetched in a single query. (default
  # 2000000)
  # cortex cli: -store.query-chunk-limit
  # store_query_chunk_limit:

  # If true, enables retention deletes of DB tables
  # cortex cli: -table-manager.retention-deletes-enabled
  # table_manager_retention_deletes_enabled:

  # Tables older than this retention period are deleted. Note: This setting is
  # destructive to data!(default: 0, which disables deletion)
  # cortex cli: -table-manager.retention-period
  # table_manager_retention_period:

  # If true, disable all changes to DB capacity
  # cortex cli: -table-manager.throughput-updates-disabled
  # table_manager_throughput_updates_disabled:

  # log level for V logs
  # cortex cli: -v
  # v:

  # Duration which table will be created/deleted before/after it's needed; we won't
  # accept sample from before this time. (default 10m0s)
  # cortex cli: -validation.create-grace-period
  # validation_create_grace_period:

  # Maximum number of label names per series. (default 30)
  # cortex cli: -validation.max-label-names-per-series
  # validation_max_label_names_per_series:

  # Maximum length accepted for label names (default 1024)
  # cortex cli: -validation.max-length-label-name
  # validation_max_length_label_name:

  # Maximum length accepted for label value. This setting also applies to the
  # metric name (default 2048)
  # cortex cli: -validation.max-length-label-value
  # validation_max_length_label_value:

  # Reject old samples.
  # cortex cli: -validation.reject-old-samples
  # validation_reject_old_samples:

  # Maximum accepted sample age before rejecting. (default 336h0m0s)
  # cortex cli: -validation.reject-old-samples.max-age
  # validation_reject_old_samples_max_age:

  # comma-separated list of pattern=N settings for file-filtered logging
  # cortex cli: -vmodule
  # vmodule:

alertmanager:
  enabled: true

  replicaCount: 1

  # Root of URL to generate if config is internal://monitor
  # alertmanager cli: -alertmanager.configs.auto-slack-root
  # alertmanager_configs_auto_slack_root:

  # Root of URL to generate if config is http://internal.monitor
  # alertmanager cli: -alertmanager.configs.auto-webhook-root
  # alertmanager_configs_auto_webhook_root:

  # Timeout for requests to Weave Cloud configs service. (default 5s)
  # alertmanager cli: -alertmanager.configs.client-timeout
  # alertmanager_configs_client_timeout:

  # Filename of fallback config to use if none specified for instance.
  # alertmanager cli: -alertmanager.configs.fallback
  # alertmanager_configs_fallback:

  # How frequently to poll Cortex configs (default 15s)
  # alertmanager cli: -alertmanager.configs.poll-interval
  # alertmanager_configs_poll_interval:

  # URL of configs API server.
  # alertmanager cli: -alertmanager.configs.url
  # alertmanager_configs_url:

  # MAC address, i.e. Mesh peer ID (default "02:42:ac:11:00:07")
  # alertmanager cli: -alertmanager.mesh.hardware-address
  # alertmanager_mesh_hardware_address:

  # Mesh listen address (default "0.0.0.0:6783")
  # alertmanager cli: -alertmanager.mesh.listen-address
  # alertmanager_mesh_listen_address:

  # Mesh peer nickname (default "a8b1123f5e8f")
  # alertmanager cli: -alertmanager.mesh.nickname
  # alertmanager_mesh_nickname:

  # Password to join the Mesh peer network (empty password disables encryption)
  # alertmanager cli: -alertmanager.mesh.password
  # alertmanager_mesh_password:

  # Hostname for mesh peers.
  # alertmanager cli: -alertmanager.mesh.peer.host
  # alertmanager_mesh_peer_host:

  # Period with which to poll DNS for mesh peers. (default 1m0s)
  # alertmanager cli: -alertmanager.mesh.peer.refresh-interval
  # alertmanager_mesh_peer_refresh_interval:

  # SRV service used to discover peers. (default "mesh")
  # alertmanager cli: -alertmanager.mesh.peer.service
  # alertmanager_mesh_peer_service:

  # Base path for data storage. (default "data/")
  # alertmanager cli: -alertmanager.storage.path
  # alertmanager_storage_path:

  # How long to keep data for. (default 120h0m0s)
  # alertmanager cli: -alertmanager.storage.retention
  # alertmanager_storage_retention:

  # The URL under which Alertmanager is externally reachable (for example, if
  # Alertmanager is served via a reverse proxy). Used for generating relative and
  # absolute links back to Alertmanager itself. If the URL has a path portion, it
  # will be used to prefix all HTTP endpoints served by Alertmanager. If omitted,
  # relevant URL components will be derived automatically.
  # alertmanager cli: -alertmanager.web.external-url
  # alertmanager_web_external_url:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # alertmanager cli: -httptest.serve
  # httptest_serve:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # alertmanager cli: -log.level
  # log_level:

  # Timeout for graceful shutdowns (default 30s)
  # alertmanager cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # alertmanager cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # alertmanager cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # alertmanager cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # alertmanager cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # alertmanager cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # alertmanager cli: -server.register-instrumentation
  # server_register_instrumentation:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/alertmanager
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095
    annotations: {}

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

configs:
  enabled: true

  replicaCount: 1

  # Path where the database migration files can be found
  # configs cli: -database.migrations
  # database_migrations:

  # File containing password (username goes in URI)
  # configs cli: -database.password-file
  # database_password_file:

  # URI where the database can be found (for dev you can use memory://) (default
  # "postgres://postgres@configs-db.weave.local/configs?sslmode=disable")
  # configs cli: -database.uri
  # database_uri:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # configs cli: -httptest.serve
  # httptest_serve:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # configs cli: -log.level
  # log_level:

  # Timeout for graceful shutdowns (default 30s)
  # configs cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # configs cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # configs cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # configs cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # configs cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # configs cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # configs cli: -server.register-instrumentation
  # server_register_instrumentation:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/configs
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
  #  cpu: 100m
  #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

distributor:
  enabled: true

  replicaCount: 1

  # points to the billing ingester sidecar (should be on localhost) (default
  # "localhost:24225")
  # distributor cli: -billing.ingester
  # billing_ingester:

  # Maximum number of billing events to buffer in memory (default 1024)
  # distributor cli: -billing.max-buffered-events
  # billing_max_buffered_events:

  # How often to retry sending events to the billing ingester. (default 500ms)
  # distributor cli: -billing.retry-delay
  # billing_retry_delay:

  # ACL Token used to interact with Consul.
  # distributor cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # distributor cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # distributor cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # distributor cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # distributor cli: -consul.prefix
  # consul_prefix:

  # How frequently to clean up clients for ingesters that have gone away. (default
  # 15s)
  # distributor cli: -distributor.client-cleanup-period
  # distributor_client_cleanup_period:

  # Report number of ingested samples to billing system.
  # distributor cli: -distributor.enable-billing
  # distributor_enable_billing:

  # Time to wait before sending more than the minimum successful query requests.
  # distributor cli: -distributor.extra-query-delay
  # distributor_extra_query_delay:

  # Run a health check on each ingester client during periodic cleanup.
  # distributor cli: -distributor.health-check-ingesters
  # distributor_health_check_ingesters:

  # Per-user allowed ingestion burst size (in number of samples). Warning, very
  # high limits will be reset every -distributor.limiter-reload-period. (default
  # 50000)
  # distributor cli: -distributor.ingestion-burst-size
  # distributor_ingestion_burst_size:

  # Per-user ingestion rate limit in samples per second. (default 25000)
  # distributor cli: -distributor.ingestion-rate-limit
  # distributor_ingestion_rate_limit:

  # Period at which to reload user ingestion limits. (default 5m0s)
  # distributor cli: -distributor.limiter-reload-period
  # distributor_limiter_reload_period:

  # Timeout for downstream ingesters. (default 2s)
  # distributor cli: -distributor.remote-timeout
  # distributor_remote_timeout:

  # The number of ingesters to write to and read from. (default 3)
  # distributor cli: -distributor.replication-factor
  # distributor_replication_factor:

  # Distribute samples based on all labels, as opposed to solely by user and metric
  # name.
  # distributor cli: -distributor.shard-by-all-labels
  # distributor_shard_by_all_labels:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # distributor cli: -httptest.serve
  # httptest_serve:

  # Expected number of labels per timeseries, used for preallocations. (default 20)
  # distributor cli: -ingester-client.expected-labels
  # ingester_client_expected_labels:

  # Expected number of samples per timeseries, used for preallocations. (default
  # 10)
  # distributor cli: -ingester-client.expected-samples-per-series
  # ingester_client_expected_samples_per_series:

  # Expected number of timeseries per request, use for preallocations. (default
  # 100)
  # distributor cli: -ingester-client.expected-timeseries
  # ingester_client_expected_timeseries:

  # gRPC client max receive message size (bytes). (default 104857600)
  # distributor cli: -ingester.client.grpc-max-recv-msg-size
  # ingester_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # distributor cli: -ingester.client.grpc-max-send-msg-size
  # ingester_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # distributor cli: -ingester.client.grpc-use-gzip-compression
  # ingester_client_grpc_use_gzip_compression:

  # The maximum number of samples that a query can return. (default 1000000)
  # distributor cli: -ingester.max-samples-per-query
  # ingester_max_samples_per_query:

  # Maximum number of active series per metric name. (default 50000)
  # distributor cli: -ingester.max-series-per-metric
  # ingester_max_series_per_metric:

  # The maximum number of series that a query can return. (default 100000)
  # distributor cli: -ingester.max-series-per-query
  # ingester_max_series_per_query:

  # Maximum number of active series per user. (default 5000000)
  # distributor cli: -ingester.max-series-per-user
  # ingester_max_series_per_user:

  # File name of per-user overrides.
  # distributor cli: -limits.per-user-override-config
  # limits_per_user_override_config:

  # Period with this to reload the overrides. (default 10s)
  # distributor cli: -limits.per-user-override-period
  # limits_per_user_override_period:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # distributor cli: -log.level
  # log_level:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # distributor cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # distributor cli: -ring.store
  # ring_store:

  # Timeout for graceful shutdowns (default 30s)
  # distributor cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # distributor cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # distributor cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # distributor cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # distributor cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # distributor cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # distributor cli: -server.register-instrumentation
  # server_register_instrumentation:

  # Limit to length of chunk store queries, 0 to disable.
  # distributor cli: -store.max-query-length
  # store_max_query_length:

  # Maximum number of chunks that can be fetched in a single query. (default
  # 2000000)
  # distributor cli: -store.query-chunk-limit
  # store_query_chunk_limit:

  # Duration which table will be created/deleted before/after it's needed; we won't
  # accept sample from before this time. (default 10m0s)
  # distributor cli: -validation.create-grace-period
  # validation_create_grace_period:

  # Maximum number of label names per series. (default 30)
  # distributor cli: -validation.max-label-names-per-series
  # validation_max_label_names_per_series:

  # Maximum length accepted for label names (default 1024)
  # distributor cli: -validation.max-length-label-name
  # validation_max_length_label_name:

  # Maximum length accepted for label value. This setting also applies to the
  # metric name (default 2048)
  # distributor cli: -validation.max-length-label-value
  # validation_max_length_label_value:

  # Reject old samples.
  # distributor cli: -validation.reject-old-samples
  # validation_reject_old_samples:

  # Maximum accepted sample age before rejecting. (default 336h0m0s)
  # distributor cli: -validation.reject-old-samples.max-age
  # validation_reject_old_samples_max_age:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/distributor
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
  #  cpu: 100m
  #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

ingester:
  enabled: true

  replicaCount: 1

  # ApplicationAutoscaling endpoint URL with escaped Key and Secret encoded.
  # ingester cli: -applicationautoscaling.url
  # applicationautoscaling_url:

  # The date (in the format YYYY-MM-DD) after which we use bigtable column keys.
  # ingester cli: -bigtable.column-key-from
  # bigtable_column_key_from:

  # gRPC client max receive message size (bytes). (default 104857600)
  # ingester cli: -bigtable.grpc-max-recv-msg-size
  # bigtable_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # ingester cli: -bigtable.grpc-max-send-msg-size
  # bigtable_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # ingester cli: -bigtable.grpc-use-gzip-compression
  # bigtable_grpc_use_gzip_compression:

  # Bigtable instance ID.
  # ingester cli: -bigtable.instance
  # bigtable_instance:

  # Bigtable project ID.
  # ingester cli: -bigtable.project
  # bigtable_project:

  # Location of BoltDB index files.
  # ingester cli: -boltdb.dir
  # boltdb_dir:

  # Cache config for chunks. Enable on-disk cache.
  # ingester cli: -cache.enable-diskcache
  # cache_enable_diskcache:

  # Cache config for chunks. Enable in-memory cache.
  # ingester cli: -cache.enable-fifocache
  # cache_enable_fifocache:

  # Comma-separated hostnames or ips of Cassandra instances.
  # ingester cli: -cassandra.addresses
  # cassandra_addresses:

  # Enable password authentication when connecting to cassandra.
  # ingester cli: -cassandra.auth
  # cassandra_auth:

  # Path to certificate file to verify the peer.
  # ingester cli: -cassandra.ca-path
  # cassandra_ca_path:

  # Consistency level for Cassandra. (default "QUORUM")
  # ingester cli: -cassandra.consistency
  # cassandra_consistency:

  # Instruct the cassandra driver to not attempt to get host info from the
  # system.peers table.
  # ingester cli: -cassandra.disable-initial-host-lookup
  # cassandra_disable_initial_host_lookup:

  # Require SSL certificate validation. (default true)
  # ingester cli: -cassandra.host-verification
  # cassandra_host_verification:

  # Keyspace to use in Cassandra.
  # ingester cli: -cassandra.keyspace
  # cassandra_keyspace:

  # Password to use when connecting to cassandra.
  # ingester cli: -cassandra.password
  # cassandra_password:

  # Port that Cassandra is running on (default 9042)
  # ingester cli: -cassandra.port
  # cassandra_port:

  # Replication factor to use in Cassandra. (default 1)
  # ingester cli: -cassandra.replication-factor
  # cassandra_replication_factor:

  # Use SSL when connecting to cassandra instances.
  # ingester cli: -cassandra.ssl
  # cassandra_ssl:

  # Timeout when connecting to cassandra. (default 600ms)
  # ingester cli: -cassandra.timeout
  # cassandra_timeout:

  # Username to use when connecting to cassandra.
  # ingester cli: -cassandra.username
  # cassandra_username:

  # Which storage client to use (aws, gcp, cassandra, inmemory). (default "aws")
  # ingester cli: -chunk.storage-client
  # chunk_storage_client:

  # Schema config yaml
  # ingester cli: -config-yaml
  # config_yaml:

  # ACL Token used to interact with Consul.
  # ingester cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # ingester cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # ingester cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # ingester cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # ingester cli: -consul.prefix
  # consul_prefix:

  # Cache config for chunks. The default validity of entries for caches unless
  # overridden.
  # ingester cli: -default-validity
  # default_validity:

  # Cache config for chunks. Path to file used to cache chunks. (default
  # "/var/run/chunks")
  # ingester cli: -diskcache.path
  # diskcache_path:

  # Cache config for chunks. Size of file (bytes) (default 1073741824)
  # ingester cli: -diskcache.size
  # diskcache_size:

  # Per-user allowed ingestion burst size (in number of samples). Warning, very
  # high limits will be reset every -distributor.limiter-reload-period. (default
  # 50000)
  # ingester cli: -distributor.ingestion-burst-size
  # distributor_ingestion_burst_size:

  # Per-user ingestion rate limit in samples per second. (default 25000)
  # ingester cli: -distributor.ingestion-rate-limit
  # distributor_ingestion_rate_limit:

  # The number of ingesters to write to and read from. (default 3)
  # ingester cli: -distributor.replication-factor
  # distributor_replication_factor:

  # DynamoDB table management requests per second limit. (default 2)
  # ingester cli: -dynamodb.api-limit
  # dynamodb_api_limit:

  # The date (in the format YYYY-MM-DD) after which we will stop querying to non-
  # base64 encoded values.
  # ingester cli: -dynamodb.base64-buckets-from
  # dynamodb_base64_buckets_from:

  # Date after which to write chunks to DynamoDB.
  # ingester cli: -dynamodb.chunk-table.from
  # dynamodb_chunk_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # ingester cli: -dynamodb.chunk-table.period
  # dynamodb_chunk_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_chunks_")
  # ingester cli: -dynamodb.chunk-table.prefix
  # dynamodb_chunk_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # ingester cli: -dynamodb.chunk-table.tag
  # dynamodb_chunk_table_tag:

  # Number of chunks to group together to parallelise fetches (zero to disable)
  # (default 10)
  # ingester cli: -dynamodb.chunk.gang.size
  # dynamodb_chunk_gang_size:

  # Max number of chunk-get operations to start in parallel (default 32)
  # ingester cli: -dynamodb.chunk.get.max.parallelism
  # dynamodb_chunk_get_max_parallelism:

  # The date (in the format YYYY-MM-DD) of the first day for which DynamoDB index
  # buckets should be day-sized vs. hour-sized.
  # ingester cli: -dynamodb.daily-buckets-from
  # dynamodb_daily_buckets_from:

  # Maximum backoff time (default 50s)
  # ingester cli: -dynamodb.max-backoff
  # dynamodb_max_backoff:

  # Maximum number of times to retry an operation (default 20)
  # ingester cli: -dynamodb.max-retries
  # dynamodb_max_retries:

  # Minimum backoff time (default 100ms)
  # ingester cli: -dynamodb.min-backoff
  # dynamodb_min_backoff:

  # The name of the DynamoDB table used before versioned schemas were introduced.
  # (default "cortex")
  # ingester cli: -dynamodb.original-table-name
  # dynamodb_original_table_name:

  # Date after which to use periodic tables.
  # ingester cli: -dynamodb.periodic-table.from
  # dynamodb_periodic_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # ingester cli: -dynamodb.periodic-table.period
  # dynamodb_periodic_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_")
  # ingester cli: -dynamodb.periodic-table.prefix
  # dynamodb_periodic_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # ingester cli: -dynamodb.periodic-table.tag
  # dynamodb_periodic_table_tag:

  # DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<table-
  # name> to use a mock in-memory implementation.
  # ingester cli: -dynamodb.url
  # dynamodb_url:

  # Should we use periodic tables.
  # ingester cli: -dynamodb.use-periodic-tables
  # dynamodb_use_periodic_tables:

  # The date (in the format YYYY-MM-DD) after which we enable v4 schema.
  # ingester cli: -dynamodb.v4-schema-from
  # dynamodb_v4_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v5 schema.
  # ingester cli: -dynamodb.v5-schema-from
  # dynamodb_v5_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v6 schema.
  # ingester cli: -dynamodb.v6-schema-from
  # dynamodb_v6_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v9 schema (Series
  # indexing).
  # ingester cli: -dynamodb.v9-schema-from
  # dynamodb_v9_schema_from:

  # How often to sample observability events (0 = never).
  # ingester cli: -event.sample-rate
  # event_sample_rate:

  # Cache config for chunks. The expiry duration for the cache.
  # ingester cli: -fifocache.duration
  # fifocache_duration:

  # Cache config for chunks. The number of entries to cache.
  # ingester cli: -fifocache.size
  # fifocache_size:

  # Name of GCS bucket to put chunks in.
  # ingester cli: -gcs.bucketname
  # gcs_bucketname:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # ingester cli: -httptest.serve
  # httptest_serve:

  # Expected number of labels per timeseries, used for preallocations. (default 20)
  # ingester cli: -ingester-client.expected-labels
  # ingester_client_expected_labels:

  # Expected number of samples per timeseries, used for preallocations. (default
  # 10)
  # ingester cli: -ingester-client.expected-samples-per-series
  # ingester_client_expected_samples_per_series:

  # Expected number of timeseries per request, use for preallocations. (default
  # 100)
  # ingester cli: -ingester-client.expected-timeseries
  # ingester_client_expected_timeseries:

  # ID to register into consul. (default "097bbb98e94d")
  # ingester cli: -ingester.ID
  # ingester_ID:

  # IP address to advertise in consul.
  # ingester cli: -ingester.addr
  # ingester_addr:

  # Range of time to subtract from MaxChunkAge to spread out flushes (default
  # 20m0s)
  # ingester cli: -ingester.chunk-age-jitter
  # ingester_chunk_age_jitter:

  # Encoding version to use for chunks. (default 1)
  # ingester cli: -ingester.chunk-encoding
  # ingester_chunk_encoding:

  # Send chunks to PENDING ingesters on exit.
  # ingester cli: -ingester.claim-on-rollout
  # ingester_claim_on_rollout:

  # gRPC client max receive message size (bytes). (default 104857600)
  # ingester cli: -ingester.client.grpc-max-recv-msg-size
  # ingester_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # ingester cli: -ingester.client.grpc-max-send-msg-size
  # ingester_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # ingester cli: -ingester.client.grpc-use-gzip-compression
  # ingester_client_grpc_use_gzip_compression:

  # Number of concurrent goroutines flushing to dynamodb. (default 50)
  # ingester cli: -ingester.concurrent-flushes
  # ingester_concurrent_flushes:

  # Timeout for individual flush operations. (default 1m0s)
  # ingester cli: -ingester.flush-op-timeout
  # ingester_flush_op_timeout:

  # Period with which to attempt to flush chunks. (default 1m0s)
  # ingester cli: -ingester.flush-period
  # ingester_flush_period:

  # Period at which to heartbeat to consul. (default 5s)
  # ingester cli: -ingester.heartbeat-period
  # ingester_heartbeat_period:

  # Name of network interface to read address from. (default [eth0 en0])
  # ingester cli: -ingester.interface
  # ingester_interface:

  # Period to wait for a claim from another ingester; will join automatically after
  # this.
  # ingester cli: -ingester.join-after
  # ingester_join_after:

  # Maximum chunk age before flushing. (default 12h0m0s)
  # ingester cli: -ingester.max-chunk-age
  # ingester_max_chunk_age:

  # Maximum chunk idle time before flushing. (default 5m0s)
  # ingester cli: -ingester.max-chunk-idle
  # ingester_max_chunk_idle:

  # Limit on the number of concurrent streams for gRPC calls (0 = unlimited)
  # (default 1000)
  # ingester cli: -ingester.max-concurrent-streams
  # ingester_max_concurrent_streams:

  # The maximum number of samples that a query can return. (default 1000000)
  # ingester cli: -ingester.max-samples-per-query
  # ingester_max_samples_per_query:

  # Maximum number of active series per metric name. (default 50000)
  # ingester cli: -ingester.max-series-per-metric
  # ingester_max_series_per_metric:

  # The maximum number of series that a query can return. (default 100000)
  # ingester cli: -ingester.max-series-per-query
  # ingester_max_series_per_query:

  # Maximum number of active series per user. (default 5000000)
  # ingester cli: -ingester.max-series-per-user
  # ingester_max_series_per_user:

  # Minimum duration to wait before becoming ready. This is to work around race
  # conditions with ingesters exiting and updating the ring. (default 1m0s)
  # ingester cli: -ingester.min-ready-duration
  # ingester_min_ready_duration:

  # Store tokens in a normalised fashion to reduce allocations.
  # ingester cli: -ingester.normalise-tokens
  # ingester_normalise_tokens:

  # Number of tokens for each ingester. (default 128)
  # ingester cli: -ingester.num-tokens
  # ingester_num_tokens:

  # port to advertise in consul (defaults to server.grpc-listen-port).
  # ingester cli: -ingester.port
  # ingester_port:

  # Period with which to update the per-user ingestion rates. (default 15s)
  # ingester cli: -ingester.rate-update-period
  # ingester_rate_update_period:

  # Period chunks will remain in memory after flushing. (default 5m0s)
  # ingester cli: -ingester.retain-period
  # ingester_retain_period:

  # Time to spend searching for a pending ingester when shutting down. (default
  # 30s)
  # ingester cli: -ingester.search-pending-for
  # ingester_search_pending_for:

  # File name of per-user overrides.
  # ingester cli: -limits.per-user-override-config
  # limits_per_user_override_config:

  # Period with this to reload the overrides. (default 10s)
  # ingester cli: -limits.per-user-override-period
  # limits_per_user_override_period:

  # Directory to store chunks in.
  # ingester cli: -local.chunk-directory
  # local_chunk_directory:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # ingester cli: -log.level
  # log_level:

  # Cache config for chunks. How many chunks to buffer for background write back.
  # (default 10000)
  # ingester cli: -memcache.write-back-buffer
  # memcache_write_back_buffer:

  # Cache config for chunks. How many goroutines to use to write back to memcache.
  # (default 10)
  # ingester cli: -memcache.write-back-goroutines
  # memcache_write_back_goroutines:

  # Cache config for chunks. How many keys to fetch in each batch.
  # ingester cli: -memcached.batchsize
  # memcached_batchsize:

  # Cache config for chunks. How long keys stay in the memcache.
  # ingester cli: -memcached.expiration
  # memcached_expiration:

  # Cache config for chunks. Hostname for memcached service to use when caching
  # chunks. If empty, no memcached will be used.
  # ingester cli: -memcached.hostname
  # memcached_hostname:

  # Cache config for chunks. Maximum number of idle connections in pool. (default
  # 16)
  # ingester cli: -memcached.max-idle-conns
  # memcached_max_idle_conns:

  # Cache config for chunks. Maximum active requests to memcache. (default 100)
  # ingester cli: -memcached.parallelism
  # memcached_parallelism:

  # Cache config for chunks. SRV service used to discover memcache servers.
  # (default "memcached")
  # ingester cli: -memcached.service
  # memcached_service:

  # Cache config for chunks. Maximum time to wait before giving up on memcached
  # requests. (default 100ms)
  # ingester cli: -memcached.timeout
  # memcached_timeout:

  # Cache config for chunks. Period with which to poll DNS for memcache servers.
  # (default 1m0s)
  # ingester cli: -memcached.update-interval
  # memcached_update_interval:

  # query to fetch error rates per table (default "sum(rate(cortex_dynamo_failures_
  # total{error="ProvisionedThroughputExceededException",operation=~".*Write.*"}[1m
  # ])) by (table) > 0")
  # ingester cli: -metrics.error-rate-query
  # metrics_error_rate_query:

  # query to fetch ingester queue length (default "sum(avg_over_time(cortex_ingeste
  # r_flush_queue_length{job="cortex/ingester"}[2m]))")
  # ingester cli: -metrics.queue-length-query
  # metrics_queue_length_query:

  # query to fetch read errors per table (default "sum(increase(cortex_dynamo_failu
  # res_total{operation="DynamoDB.QueryPages",error="ProvisionedThroughputExceededE
  # xception"}[1m])) by (table) > 0")
  # ingester cli: -metrics.read-error-query
  # metrics_read_error_query:

  # query to fetch read capacity usage per table (default "sum(rate(cortex_dynamo_c
  # onsumed_capacity_total{operation="DynamoDB.QueryPages"}[1h])) by (table) > 0")
  # ingester cli: -metrics.read-usage-query
  # metrics_read_usage_query:

  # Scale up capacity by this multiple (default 1.3)
  # ingester cli: -metrics.scale-up-factor
  # metrics_scale_up_factor:

  # Queue length above which we will scale up capacity (default 100000)
  # ingester cli: -metrics.target-queue-length
  # metrics_target_queue_length:

  # Use metrics-based autoscaling, via this query URL
  # ingester cli: -metrics.url
  # metrics_url:

  # query to fetch write capacity usage per table (default "sum(rate(cortex_dynamo_
  # consumed_capacity_total{operation="DynamoDB.BatchWriteItem"}[15m])) by (table)
  # > 0")
  # ingester cli: -metrics.usage-query
  # metrics_usage_query:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # ingester cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # ingester cli: -ring.store
  # ring_store:

  # S3 endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<bucket-
  # name> to use a mock in-memory implementation.
  # ingester cli: -s3.url
  # s3_url:

  # Timeout for graceful shutdowns (default 30s)
  # ingester cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # ingester cli: -server.grpc-listen-port
  server_grpc_listen_port: 9095

  # Idle timeout for HTTP server (default 2m0s)
  # ingester cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # ingester cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # ingester cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # ingester cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # ingester cli: -server.register-instrumentation
  # server_register_instrumentation:

  # When using bigchunk encoding, start a new bigchunk if over this size (0 =
  # unlimited)
  # ingester cli: -store.bigchunk-size-cap-bytes
  # store_bigchunk_size_cap_bytes:

  # Cache index entries older than this period. 0 to disable.
  # ingester cli: -store.cache-lookups-older-than
  # store_cache_lookups_older_than:

  # Size of in-memory cardinality cache, 0 to disable.
  # ingester cli: -store.cardinality-cache-size
  # store_cardinality_cache_size:

  # Period for which entries in the cardinality cache are valid. (default 1h0m0s)
  # ingester cli: -store.cardinality-cache-validity
  # store_cardinality_cache_validity:

  # Cardinality limit for index queries. (default 100000)
  # ingester cli: -store.cardinality-limit
  # store_cardinality_limit:

  # When saving varbit chunks, pad to 1024 bytes (default true)
  # ingester cli: -store.fullsize-chunks
  # store_fullsize_chunks:

  # Cache config for index entry reading. Enable on-disk cache.
  # ingester cli: -store.index-cache-read.cache.enable-diskcache
  # store_index_cache_read_cache_enable_diskcache:

  # Cache config for index entry reading. Enable in-memory cache.
  # ingester cli: -store.index-cache-read.cache.enable-fifocache
  # store_index_cache_read_cache_enable_fifocache:

  # Cache config for index entry reading. The default validity of entries for
  # caches unless overridden.
  # ingester cli: -store.index-cache-read.default-validity
  # store_index_cache_read_default_validity:

  # Cache config for index entry reading. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # ingester cli: -store.index-cache-read.diskcache.path
  # store_index_cache_read_diskcache_path:

  # Cache config for index entry reading. Size of file (bytes) (default 1073741824)
  # ingester cli: -store.index-cache-read.diskcache.size
  # store_index_cache_read_diskcache_size:

  # Cache config for index entry reading. The expiry duration for the cache.
  # ingester cli: -store.index-cache-read.fifocache.duration
  # store_index_cache_read_fifocache_duration:

  # Cache config for index entry reading. The number of entries to cache.
  # ingester cli: -store.index-cache-read.fifocache.size
  # store_index_cache_read_fifocache_size:

  # Cache config for index entry reading. How many chunks to buffer for background
  # write back. (default 10000)
  # ingester cli: -store.index-cache-read.memcache.write-back-buffer
  # store_index_cache_read_memcache_write_back_buffer:

  # Cache config for index entry reading. How many goroutines to use to write back
  # to memcache. (default 10)
  # ingester cli: -store.index-cache-read.memcache.write-back-goroutines
  # store_index_cache_read_memcache_write_back_goroutines:

  # Cache config for index entry reading. How many keys to fetch in each batch.
  # ingester cli: -store.index-cache-read.memcached.batchsize
  # store_index_cache_read_memcached_batchsize:

  # Cache config for index entry reading. How long keys stay in the memcache.
  # ingester cli: -store.index-cache-read.memcached.expiration
  # store_index_cache_read_memcached_expiration:

  # Cache config for index entry reading. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # ingester cli: -store.index-cache-read.memcached.hostname
  # store_index_cache_read_memcached_hostname:

  # Cache config for index entry reading. Maximum number of idle connections in
  # pool. (default 16)
  # ingester cli: -store.index-cache-read.memcached.max-idle-conns
  # store_index_cache_read_memcached_max_idle_conns:

  # Cache config for index entry reading. Maximum active requests to memcache.
  # (default 100)
  # ingester cli: -store.index-cache-read.memcached.parallelism
  # store_index_cache_read_memcached_parallelism:

  # Cache config for index entry reading. SRV service used to discover memcache
  # servers. (default "memcached")
  # ingester cli: -store.index-cache-read.memcached.service
  # store_index_cache_read_memcached_service:

  # Cache config for index entry reading. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # ingester cli: -store.index-cache-read.memcached.timeout
  # store_index_cache_read_memcached_timeout:

  # Cache config for index entry reading. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # ingester cli: -store.index-cache-read.memcached.update-interval
  # store_index_cache_read_memcached_update_interval:

  # Cache validity for active index entries. Should be no higher than
  # -ingester.max-chunk-idle. (default 5m0s)
  # ingester cli: -store.index-cache-validity
  # store_index_cache_validity:

  # Cache config for index entry writing. Enable on-disk cache.
  # ingester cli: -store.index-cache-write.cache.enable-diskcache
  # store_index_cache_write_cache_enable_diskcache:

  # Cache config for index entry writing. Enable in-memory cache.
  # ingester cli: -store.index-cache-write.cache.enable-fifocache
  # store_index_cache_write_cache_enable_fifocache:

  # Cache config for index entry writing. The default validity of entries for
  # caches unless overridden.
  # ingester cli: -store.index-cache-write.default-validity
  # store_index_cache_write_default_validity:

  # Cache config for index entry writing. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # ingester cli: -store.index-cache-write.diskcache.path
  # store_index_cache_write_diskcache_path:

  # Cache config for index entry writing. Size of file (bytes) (default 1073741824)
  # ingester cli: -store.index-cache-write.diskcache.size
  # store_index_cache_write_diskcache_size:

  # Cache config for index entry writing. The expiry duration for the cache.
  # ingester cli: -store.index-cache-write.fifocache.duration
  # store_index_cache_write_fifocache_duration:

  # Cache config for index entry writing. The number of entries to cache.
  # ingester cli: -store.index-cache-write.fifocache.size
  # store_index_cache_write_fifocache_size:

  # Cache config for index entry writing. How many chunks to buffer for background
  # write back. (default 10000)
  # ingester cli: -store.index-cache-write.memcache.write-back-buffer
  # store_index_cache_write_memcache_write_back_buffer:

  # Cache config for index entry writing. How many goroutines to use to write back
  # to memcache. (default 10)
  # ingester cli: -store.index-cache-write.memcache.write-back-goroutines
  # store_index_cache_write_memcache_write_back_goroutines:

  # Cache config for index entry writing. How many keys to fetch in each batch.
  # ingester cli: -store.index-cache-write.memcached.batchsize
  # store_index_cache_write_memcached_batchsize:

  # Cache config for index entry writing. How long keys stay in the memcache.
  # ingester cli: -store.index-cache-write.memcached.expiration
  # store_index_cache_write_memcached_expiration:

  # Cache config for index entry writing. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # ingester cli: -store.index-cache-write.memcached.hostname
  # store_index_cache_write_memcached_hostname:

  # Cache config for index entry writing. Maximum number of idle connections in
  # pool. (default 16)
  # ingester cli: -store.index-cache-write.memcached.max-idle-conns
  # store_index_cache_write_memcached_max_idle_conns:

  # Cache config for index entry writing. Maximum active requests to memcache.
  # (default 100)
  # ingester cli: -store.index-cache-write.memcached.parallelism
  # store_index_cache_write_memcached_parallelism:

  # Cache config for index entry writing. SRV service used to discover memcache
  # servers. (default "memcached")
  # ingester cli: -store.index-cache-write.memcached.service
  # store_index_cache_write_memcached_service:

  # Cache config for index entry writing. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # ingester cli: -store.index-cache-write.memcached.timeout
  # store_index_cache_write_memcached_timeout:

  # Cache config for index entry writing. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # ingester cli: -store.index-cache-write.memcached.update-interval
  # store_index_cache_write_memcached_update_interval:

  # Limit to length of chunk store queries, 0 to disable.
  # ingester cli: -store.max-query-length
  # store_max_query_length:

  # Minimum time between chunk update and being saved to the store.
  # ingester cli: -store.min-chunk-age
  # store_min_chunk_age:

  # Maximum number of chunks that can be fetched in a single query. (default
  # 2000000)
  # ingester cli: -store.query-chunk-limit
  # store_query_chunk_limit:

  # Duration which table will be created/deleted before/after it's needed; we won't
  # accept sample from before this time. (default 10m0s)
  # ingester cli: -validation.create-grace-period
  # validation_create_grace_period:

  # Maximum number of label names per series. (default 30)
  # ingester cli: -validation.max-label-names-per-series
  # validation_max_label_names_per_series:

  # Maximum length accepted for label names (default 1024)
  # ingester cli: -validation.max-length-label-name
  # validation_max_length_label_name:

  # Maximum length accepted for label value. This setting also applies to the
  # metric name (default 2048)
  # ingester cli: -validation.max-length-label-value
  # validation_max_length_label_value:

  # Reject old samples.
  # ingester cli: -validation.reject-old-samples
  # validation_reject_old_samples:

  # Maximum accepted sample age before rejecting. (default 336h0m0s)
  # ingester cli: -validation.reject-old-samples.max-age
  # validation_reject_old_samples_max_age:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/ingester
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
  #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

nginx:
  enabled: true

  replicaCount: 1

  image:
    repository: nginx
    tag: 1.14.2
    pullPolicy: IfNotPresent

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}
    exporter:
      repository: nginx/nginx-prometheus-exporter
      tag: 0.2.0
      pullPolicy: IfNotPresent
      resources: {}
        # limits:
        #  cpu: 100m
        #  memory: 128Mi
        # requests:
        #  cpu: 100m
        #  memory: 128Mi

  service:
    type: ClusterIP
    port: 80
    nodePort: 30080
    annotations: {}

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

querier:
  enabled: true

  replicaCount: 1

  # log to standard error as well as files
  # querier cli: -alsologtostderr
  # alsologtostderr:

  # ApplicationAutoscaling endpoint URL with escaped Key and Secret encoded.
  # querier cli: -applicationautoscaling.url
  # applicationautoscaling_url:

  # The date (in the format YYYY-MM-DD) after which we use bigtable column keys.
  # querier cli: -bigtable.column-key-from
  # bigtable_column_key_from:

  # gRPC client max receive message size (bytes). (default 104857600)
  # querier cli: -bigtable.grpc-max-recv-msg-size
  # bigtable_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # querier cli: -bigtable.grpc-max-send-msg-size
  # bigtable_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # querier cli: -bigtable.grpc-use-gzip-compression
  # bigtable_grpc_use_gzip_compression:

  # Bigtable instance ID.
  # querier cli: -bigtable.instance
  # bigtable_instance:

  # Bigtable project ID.
  # querier cli: -bigtable.project
  # bigtable_project:

  # points to the billing ingester sidecar (should be on localhost) (default
  # "localhost:24225")
  # querier cli: -billing.ingester
  # billing_ingester:

  # Maximum number of billing events to buffer in memory (default 1024)
  # querier cli: -billing.max-buffered-events
  # billing_max_buffered_events:

  # How often to retry sending events to the billing ingester. (default 500ms)
  # querier cli: -billing.retry-delay
  # billing_retry_delay:

  # Location of BoltDB index files.
  # querier cli: -boltdb.dir
  # boltdb_dir:

  # Cache config for chunks. Enable on-disk cache.
  # querier cli: -cache.enable-diskcache
  # cache_enable_diskcache:

  # Cache config for chunks. Enable in-memory cache.
  # querier cli: -cache.enable-fifocache
  # cache_enable_fifocache:

  # Comma-separated hostnames or ips of Cassandra instances.
  # querier cli: -cassandra.addresses
  # cassandra_addresses:

  # Enable password authentication when connecting to cassandra.
  # querier cli: -cassandra.auth
  # cassandra_auth:

  # Path to certificate file to verify the peer.
  # querier cli: -cassandra.ca-path
  # cassandra_ca_path:

  # Consistency level for Cassandra. (default "QUORUM")
  # querier cli: -cassandra.consistency
  # cassandra_consistency:

  # Instruct the cassandra driver to not attempt to get host info from the
  # system.peers table.
  # querier cli: -cassandra.disable-initial-host-lookup
  # cassandra_disable_initial_host_lookup:

  # Require SSL certificate validation. (default true)
  # querier cli: -cassandra.host-verification
  # cassandra_host_verification:

  # Keyspace to use in Cassandra.
  # querier cli: -cassandra.keyspace
  # cassandra_keyspace:

  # Password to use when connecting to cassandra.
  # querier cli: -cassandra.password
  # cassandra_password:

  # Port that Cassandra is running on (default 9042)
  # querier cli: -cassandra.port
  # cassandra_port:

  # Replication factor to use in Cassandra. (default 1)
  # querier cli: -cassandra.replication-factor
  # cassandra_replication_factor:

  # Use SSL when connecting to cassandra instances.
  # querier cli: -cassandra.ssl
  # cassandra_ssl:

  # Timeout when connecting to cassandra. (default 600ms)
  # querier cli: -cassandra.timeout
  # cassandra_timeout:

  # Username to use when connecting to cassandra.
  # querier cli: -cassandra.username
  # cassandra_username:

  # Which storage client to use (aws, gcp, cassandra, inmemory). (default "aws")
  # querier cli: -chunk.storage-client
  # chunk_storage_client:

  # Schema config yaml
  # querier cli: -config-yaml
  # config_yaml:

  # ACL Token used to interact with Consul.
  # querier cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # querier cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # querier cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # querier cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # querier cli: -consul.prefix
  # consul_prefix:

  # Cache config for chunks. The default validity of entries for caches unless
  # overridden.
  # querier cli: -default-validity
  # default_validity:

  # Cache config for chunks. Path to file used to cache chunks. (default
  # "/var/run/chunks")
  # querier cli: -diskcache.path
  # diskcache_path:

  # Cache config for chunks. Size of file (bytes) (default 1073741824)
  # querier cli: -diskcache.size
  # diskcache_size:

  # How frequently to clean up clients for ingesters that have gone away. (default
  # 15s)
  # querier cli: -distributor.client-cleanup-period
  # distributor_client_cleanup_period:

  # Report number of ingested samples to billing system.
  # querier cli: -distributor.enable-billing
  # distributor_enable_billing:

  # Time to wait before sending more than the minimum successful query requests.
  # querier cli: -distributor.extra-query-delay
  # distributor_extra_query_delay:

  # Run a health check on each ingester client during periodic cleanup.
  # querier cli: -distributor.health-check-ingesters
  # distributor_health_check_ingesters:

  # Per-user allowed ingestion burst size (in number of samples). Warning, very
  # high limits will be reset every -distributor.limiter-reload-period. (default
  # 50000)
  # querier cli: -distributor.ingestion-burst-size
  # distributor_ingestion_burst_size:

  # Per-user ingestion rate limit in samples per second. (default 25000)
  # querier cli: -distributor.ingestion-rate-limit
  # distributor_ingestion_rate_limit:

  # Period at which to reload user ingestion limits. (default 5m0s)
  # querier cli: -distributor.limiter-reload-period
  # distributor_limiter_reload_period:

  # Timeout for downstream ingesters. (default 2s)
  # querier cli: -distributor.remote-timeout
  # distributor_remote_timeout:

  # The number of ingesters to write to and read from. (default 3)
  # querier cli: -distributor.replication-factor
  # distributor_replication_factor:

  # Distribute samples based on all labels, as opposed to solely by user and metric
  # name.
  # querier cli: -distributor.shard-by-all-labels
  # distributor_shard_by_all_labels:

  # DynamoDB table management requests per second limit. (default 2)
  # querier cli: -dynamodb.api-limit
  # dynamodb_api_limit:

  # The date (in the format YYYY-MM-DD) after which we will stop querying to non-
  # base64 encoded values.
  # querier cli: -dynamodb.base64-buckets-from
  # dynamodb_base64_buckets_from:

  # Date after which to write chunks to DynamoDB.
  # querier cli: -dynamodb.chunk-table.from
  # dynamodb_chunk_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # querier cli: -dynamodb.chunk-table.period
  # dynamodb_chunk_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_chunks_")
  # querier cli: -dynamodb.chunk-table.prefix
  # dynamodb_chunk_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # querier cli: -dynamodb.chunk-table.tag
  # dynamodb_chunk_table_tag:

  # Number of chunks to group together to parallelise fetches (zero to disable)
  # (default 10)
  # querier cli: -dynamodb.chunk.gang.size
  # dynamodb_chunk_gang_size:

  # Max number of chunk-get operations to start in parallel (default 32)
  # querier cli: -dynamodb.chunk.get.max.parallelism
  # dynamodb_chunk_get_max_parallelism:

  # The date (in the format YYYY-MM-DD) of the first day for which DynamoDB index
  # buckets should be day-sized vs. hour-sized.
  # querier cli: -dynamodb.daily-buckets-from
  # dynamodb_daily_buckets_from:

  # Maximum backoff time (default 50s)
  # querier cli: -dynamodb.max-backoff
  # dynamodb_max_backoff:

  # Maximum number of times to retry an operation (default 20)
  # querier cli: -dynamodb.max-retries
  # dynamodb_max_retries:

  # Minimum backoff time (default 100ms)
  # querier cli: -dynamodb.min-backoff
  # dynamodb_min_backoff:

  # The name of the DynamoDB table used before versioned schemas were introduced.
  # (default "cortex")
  # querier cli: -dynamodb.original-table-name
  # dynamodb_original_table_name:

  # Date after which to use periodic tables.
  # querier cli: -dynamodb.periodic-table.from
  # dynamodb_periodic_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # querier cli: -dynamodb.periodic-table.period
  # dynamodb_periodic_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_")
  # querier cli: -dynamodb.periodic-table.prefix
  # dynamodb_periodic_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # querier cli: -dynamodb.periodic-table.tag
  # dynamodb_periodic_table_tag:

  # DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<table-
  # name> to use a mock in-memory implementation.
  # querier cli: -dynamodb.url
  # dynamodb_url:

  # Should we use periodic tables.
  # querier cli: -dynamodb.use-periodic-tables
  # dynamodb_use_periodic_tables:

  # The date (in the format YYYY-MM-DD) after which we enable v4 schema.
  # querier cli: -dynamodb.v4-schema-from
  # dynamodb_v4_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v5 schema.
  # querier cli: -dynamodb.v5-schema-from
  # dynamodb_v5_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v6 schema.
  # querier cli: -dynamodb.v6-schema-from
  # dynamodb_v6_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v9 schema (Series
  # indexing).
  # querier cli: -dynamodb.v9-schema-from
  # dynamodb_v9_schema_from:

  # Cache config for chunks. The expiry duration for the cache.
  # querier cli: -fifocache.duration
  # fifocache_duration:

  # Cache config for chunks. The number of entries to cache.
  # querier cli: -fifocache.size
  # fifocache_size:

  # Name of GCS bucket to put chunks in.
  # querier cli: -gcs.bucketname
  # gcs_bucketname:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # querier cli: -httptest.serve
  # httptest_serve:

  # gRPC client max receive message size (bytes). (default 104857600)
  # querier cli: -ingester.client.grpc-max-recv-msg-size
  # ingester_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # querier cli: -ingester.client.grpc-max-send-msg-size
  # ingester_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # querier cli: -ingester.client.grpc-use-gzip-compression
  # ingester_client_grpc_use_gzip_compression:

  # The maximum number of samples that a query can return. (default 1000000)
  # querier cli: -ingester.max-samples-per-query
  # ingester_max_samples_per_query:

  # Maximum number of active series per metric name. (default 50000)
  # querier cli: -ingester.max-series-per-metric
  # ingester_max_series_per_metric:

  # The maximum number of series that a query can return. (default 100000)
  # querier cli: -ingester.max-series-per-query
  # ingester_max_series_per_query:

  # Maximum number of active series per user. (default 5000000)
  # querier cli: -ingester.max-series-per-user
  # ingester_max_series_per_user:

  # File name of per-user overrides.
  # querier cli: -limits.per-user-override-config
  # limits_per_user_override_config:

  # Period with this to reload the overrides. (default 10s)
  # querier cli: -limits.per-user-override-period
  # limits_per_user_override_period:

  # Directory to store chunks in.
  # querier cli: -local.chunk-directory
  # local_chunk_directory:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # querier cli: -log.level
  # log_level:

  # when logging hits line file:N, emit a stack trace
  # querier cli: -log_backtrace_at
  # log_backtrace_at:

  # If non-empty, write log files in this directory
  # querier cli: -log_dir
  # log_dir:

  # log to standard error instead of files
  # querier cli: -logtostderr
  # logtostderr:

  # Cache config for chunks. How many chunks to buffer for background write back.
  # (default 10000)
  # querier cli: -memcache.write-back-buffer
  # memcache_write_back_buffer:

  # Cache config for chunks. How many goroutines to use to write back to memcache.
  # (default 10)
  # querier cli: -memcache.write-back-goroutines
  # memcache_write_back_goroutines:

  # Cache config for chunks. How many keys to fetch in each batch.
  # querier cli: -memcached.batchsize
  # memcached_batchsize:

  # Cache config for chunks. How long keys stay in the memcache.
  # querier cli: -memcached.expiration
  # memcached_expiration:

  # Cache config for chunks. Hostname for memcached service to use when caching
  # chunks. If empty, no memcached will be used.
  # querier cli: -memcached.hostname
  # memcached_hostname:

  # Cache config for chunks. Maximum number of idle connections in pool. (default
  # 16)
  # querier cli: -memcached.max-idle-conns
  # memcached_max_idle_conns:

  # Cache config for chunks. Maximum active requests to memcache. (default 100)
  # querier cli: -memcached.parallelism
  # memcached_parallelism:

  # Cache config for chunks. SRV service used to discover memcache servers.
  # (default "memcached")
  # querier cli: -memcached.service
  # memcached_service:

  # Cache config for chunks. Maximum time to wait before giving up on memcached
  # requests. (default 100ms)
  # querier cli: -memcached.timeout
  # memcached_timeout:

  # Cache config for chunks. Period with which to poll DNS for memcache servers.
  # (default 1m0s)
  # querier cli: -memcached.update-interval
  # memcached_update_interval:

  # query to fetch error rates per table (default "sum(rate(cortex_dynamo_failures_
  # total{error="ProvisionedThroughputExceededException",operation=~".*Write.*"}[1m
  # ])) by (table) > 0")
  # querier cli: -metrics.error-rate-query
  # metrics_error_rate_query:

  # query to fetch ingester queue length (default "sum(avg_over_time(cortex_ingeste
  # r_flush_queue_length{job="cortex/ingester"}[2m]))")
  # querier cli: -metrics.queue-length-query
  # metrics_queue_length_query:

  # query to fetch read errors per table (default "sum(increase(cortex_dynamo_failu
  # res_total{operation="DynamoDB.QueryPages",error="ProvisionedThroughputExceededE
  # xception"}[1m])) by (table) > 0")
  # querier cli: -metrics.read-error-query
  # metrics_read_error_query:

  # query to fetch read capacity usage per table (default "sum(rate(cortex_dynamo_c
  # onsumed_capacity_total{operation="DynamoDB.QueryPages"}[1h])) by (table) > 0")
  # querier cli: -metrics.read-usage-query
  # metrics_read_usage_query:

  # Scale up capacity by this multiple (default 1.3)
  # querier cli: -metrics.scale-up-factor
  # metrics_scale_up_factor:

  # Queue length above which we will scale up capacity (default 100000)
  # querier cli: -metrics.target-queue-length
  # metrics_target_queue_length:

  # Use metrics-based autoscaling, via this query URL
  # querier cli: -metrics.url
  # metrics_url:

  # query to fetch write capacity usage per table (default "sum(rate(cortex_dynamo_
  # consumed_capacity_total{operation="DynamoDB.BatchWriteItem"}[15m])) by (table)
  # > 0")
  # querier cli: -metrics.usage-query
  # metrics_usage_query:

  # Time since the last sample after which a time series is considered stale and
  # ignored by expression evaluations. (default 5m0s)
  # querier cli: -promql.lookback-delta
  # promql_lookback_delta:

  # Use batch iterators to execute query, as opposed to fully materialising the
  # series in memory.  Takes precedent over the -querier.iterators flag.
  # querier cli: -querier.batch-iterators
  # querier_batch_iterators:

  # How often to query DNS. (default 10s)
  # querier cli: -querier.dns-lookup-period
  # querier_dns_lookup_period:

  # Address of query frontend service.
  # querier cli: -querier.frontend-address
  # querier_frontend_address:

  # gRPC client max receive message size (bytes). (default 104857600)
  # querier cli: -querier.frontend-client.grpc-max-recv-msg-size
  # querier_frontend_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # querier cli: -querier.frontend-client.grpc-max-send-msg-size
  # querier_frontend_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # querier cli: -querier.frontend-client.grpc-use-gzip-compression
  # querier_frontend_client_grpc_use_gzip_compression:

  # Use streaming RPCs to query ingester.
  # querier cli: -querier.ingester-streaming
  # querier_ingester_streaming:

  # Use iterators to execute query, as opposed to fully materialising the series in
  # memory.
  # querier cli: -querier.iterators
  # querier_iterators:

  # The maximum number of concurrent queries. (default 20)
  # querier cli: -querier.max-concurrent
  # querier_max_concurrent:

  # Maximum number of samples a single query can load into memory. (default
  # 50000000)
  # querier cli: -querier.max-samples
  # querier_max_samples:

  # Maximum lookback beyond which queries are not sent to ingester. 0 means all
  # queries are sent to ingester.
  # querier cli: -querier.query-ingesters-within
  # querier_query_ingesters_within:

  # Max subqueries run in parallel per higher-level query. (default 100)
  # querier cli: -querier.query-parallelism
  # querier_query_parallelism:

  # The timeout for a query. (default 2m0s)
  # querier cli: -querier.timeout
  # querier_timeout:

  # Number of simultaneous queries to process. (default 10)
  # querier cli: -querier.worker-parallelism
  # querier_worker_parallelism:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # querier cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # querier cli: -ring.store
  # ring_store:

  # S3 endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<bucket-
  # name> to use a mock in-memory implementation.
  # querier cli: -s3.url
  # s3_url:

  # Timeout for graceful shutdowns (default 30s)
  # querier cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # querier cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # querier cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # querier cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # querier cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # querier cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # querier cli: -server.register-instrumentation
  # server_register_instrumentation:

  # logs at or above this threshold go to stderr
  # querier cli: -stderrthreshold
  # stderrthreshold:

  # Cache index entries older than this period. 0 to disable.
  # querier cli: -store.cache-lookups-older-than
  # store_cache_lookups_older_than:

  # Size of in-memory cardinality cache, 0 to disable.
  # querier cli: -store.cardinality-cache-size
  # store_cardinality_cache_size:

  # Period for which entries in the cardinality cache are valid. (default 1h0m0s)
  # querier cli: -store.cardinality-cache-validity
  # store_cardinality_cache_validity:

  # Cardinality limit for index queries. (default 100000)
  # querier cli: -store.cardinality-limit
  # store_cardinality_limit:

  # Cache config for index entry reading. Enable on-disk cache.
  # querier cli: -store.index-cache-read.cache.enable-diskcache
  # store_index_cache_read_cache_enable_diskcache:

  # Cache config for index entry reading. Enable in-memory cache.
  # querier cli: -store.index-cache-read.cache.enable-fifocache
  # store_index_cache_read_cache_enable_fifocache:

  # Cache config for index entry reading. The default validity of entries for
  # caches unless overridden.
  # querier cli: -store.index-cache-read.default-validity
  # store_index_cache_read_default_validity:

  # Cache config for index entry reading. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # querier cli: -store.index-cache-read.diskcache.path
  # store_index_cache_read_diskcache_path:

  # Cache config for index entry reading. Size of file (bytes) (default 1073741824)
  # querier cli: -store.index-cache-read.diskcache.size
  # store_index_cache_read_diskcache_size:

  # Cache config for index entry reading. The expiry duration for the cache.
  # querier cli: -store.index-cache-read.fifocache.duration
  # store_index_cache_read_fifocache_duration:

  # Cache config for index entry reading. The number of entries to cache.
  # querier cli: -store.index-cache-read.fifocache.size
  # store_index_cache_read_fifocache_size:

  # Cache config for index entry reading. How many chunks to buffer for background
  # write back. (default 10000)
  # querier cli: -store.index-cache-read.memcache.write-back-buffer
  # store_index_cache_read_memcache_write_back_buffer:

  # Cache config for index entry reading. How many goroutines to use to write back
  # to memcache. (default 10)
  # querier cli: -store.index-cache-read.memcache.write-back-goroutines
  # store_index_cache_read_memcache_write_back_goroutines:

  # Cache config for index entry reading. How many keys to fetch in each batch.
  # querier cli: -store.index-cache-read.memcached.batchsize
  # store_index_cache_read_memcached_batchsize:

  # Cache config for index entry reading. How long keys stay in the memcache.
  # querier cli: -store.index-cache-read.memcached.expiration
  # store_index_cache_read_memcached_expiration:

  # Cache config for index entry reading. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # querier cli: -store.index-cache-read.memcached.hostname
  # store_index_cache_read_memcached_hostname:

  # Cache config for index entry reading. Maximum number of idle connections in
  # pool. (default 16)
  # querier cli: -store.index-cache-read.memcached.max-idle-conns
  # store_index_cache_read_memcached_max_idle_conns:

  # Cache config for index entry reading. Maximum active requests to memcache.
  # (default 100)
  # querier cli: -store.index-cache-read.memcached.parallelism
  # store_index_cache_read_memcached_parallelism:

  # Cache config for index entry reading. SRV service used to discover memcache
  # servers. (default "memcached")
  # querier cli: -store.index-cache-read.memcached.service
  # store_index_cache_read_memcached_service:

  # Cache config for index entry reading. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # querier cli: -store.index-cache-read.memcached.timeout
  # store_index_cache_read_memcached_timeout:

  # Cache config for index entry reading. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # querier cli: -store.index-cache-read.memcached.update-interval
  # store_index_cache_read_memcached_update_interval:

  # Cache validity for active index entries. Should be no higher than
  # -ingester.max-chunk-idle. (default 5m0s)
  # querier cli: -store.index-cache-validity
  # store_index_cache_validity:

  # Cache config for index entry writing. Enable on-disk cache.
  # querier cli: -store.index-cache-write.cache.enable-diskcache
  # store_index_cache_write_cache_enable_diskcache:

  # Cache config for index entry writing. Enable in-memory cache.
  # querier cli: -store.index-cache-write.cache.enable-fifocache
  # store_index_cache_write_cache_enable_fifocache:

  # Cache config for index entry writing. The default validity of entries for
  # caches unless overridden.
  # querier cli: -store.index-cache-write.default-validity
  # store_index_cache_write_default_validity:

  # Cache config for index entry writing. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # querier cli: -store.index-cache-write.diskcache.path
  # store_index_cache_write_diskcache_path:

  # Cache config for index entry writing. Size of file (bytes) (default 1073741824)
  # querier cli: -store.index-cache-write.diskcache.size
  # store_index_cache_write_diskcache_size:

  # Cache config for index entry writing. The expiry duration for the cache.
  # querier cli: -store.index-cache-write.fifocache.duration
  # store_index_cache_write_fifocache_duration:

  # Cache config for index entry writing. The number of entries to cache.
  # querier cli: -store.index-cache-write.fifocache.size
  # store_index_cache_write_fifocache_size:

  # Cache config for index entry writing. How many chunks to buffer for background
  # write back. (default 10000)
  # querier cli: -store.index-cache-write.memcache.write-back-buffer
  # store_index_cache_write_memcache_write_back_buffer:

  # Cache config for index entry writing. How many goroutines to use to write back
  # to memcache. (default 10)
  # querier cli: -store.index-cache-write.memcache.write-back-goroutines
  # store_index_cache_write_memcache_write_back_goroutines:

  # Cache config for index entry writing. How many keys to fetch in each batch.
  # querier cli: -store.index-cache-write.memcached.batchsize
  # store_index_cache_write_memcached_batchsize:

  # Cache config for index entry writing. How long keys stay in the memcache.
  # querier cli: -store.index-cache-write.memcached.expiration
  # store_index_cache_write_memcached_expiration:

  # Cache config for index entry writing. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # querier cli: -store.index-cache-write.memcached.hostname
  # store_index_cache_write_memcached_hostname:

  # Cache config for index entry writing. Maximum number of idle connections in
  # pool. (default 16)
  # querier cli: -store.index-cache-write.memcached.max-idle-conns
  # store_index_cache_write_memcached_max_idle_conns:

  # Cache config for index entry writing. Maximum active requests to memcache.
  # (default 100)
  # querier cli: -store.index-cache-write.memcached.parallelism
  # store_index_cache_write_memcached_parallelism:

  # Cache config for index entry writing. SRV service used to discover memcache
  # servers. (default "memcached")
  # querier cli: -store.index-cache-write.memcached.service
  # store_index_cache_write_memcached_service:

  # Cache config for index entry writing. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # querier cli: -store.index-cache-write.memcached.timeout
  # store_index_cache_write_memcached_timeout:

  # Cache config for index entry writing. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # querier cli: -store.index-cache-write.memcached.update-interval
  # store_index_cache_write_memcached_update_interval:

  # Limit to length of chunk store queries, 0 to disable.
  # querier cli: -store.max-query-length
  # store_max_query_length:

  # Minimum time between chunk update and being saved to the store.
  # querier cli: -store.min-chunk-age
  # store_min_chunk_age:

  # Maximum number of chunks that can be fetched in a single query. (default
  # 2000000)
  # querier cli: -store.query-chunk-limit
  # store_query_chunk_limit:

  # log level for V logs
  # querier cli: -v
  # v:

  # Duration which table will be created/deleted before/after it's needed; we won't
  # accept sample from before this time. (default 10m0s)
  # querier cli: -validation.create-grace-period
  # validation_create_grace_period:

  # Maximum number of label names per series. (default 30)
  # querier cli: -validation.max-label-names-per-series
  # validation_max_label_names_per_series:

  # Maximum length accepted for label names (default 1024)
  # querier cli: -validation.max-length-label-name
  # validation_max_length_label_name:

  # Maximum length accepted for label value. This setting also applies to the
  # metric name (default 2048)
  # querier cli: -validation.max-length-label-value
  # validation_max_length_label_value:

  # Reject old samples.
  # querier cli: -validation.reject-old-samples
  # validation_reject_old_samples:

  # Maximum accepted sample age before rejecting. (default 336h0m0s)
  # querier cli: -validation.reject-old-samples.max-age
  # validation_reject_old_samples_max_age:

  # comma-separated list of pattern=N settings for file-filtered logging
  # querier cli: -vmodule
  # vmodule:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/querier
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
  #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

query_frontend:
  enabled: true

  replicaCount: 1

  # Enable on-disk cache.
  # query-frontend cli: -cache.enable-diskcache
  # cache_enable_diskcache:

  # Enable in-memory cache.
  # query-frontend cli: -cache.enable-fifocache
  # cache_enable_fifocache:

  # The default validity of entries for caches unless overridden.
  # query-frontend cli: -default-validity
  # default_validity:

  # Path to file used to cache chunks. (default "/var/run/chunks")
  # query-frontend cli: -diskcache.path
  # diskcache_path:

  # Size of file (bytes) (default 1073741824)
  # query-frontend cli: -diskcache.size
  # diskcache_size:

  # The expiry duration for the cache.
  # query-frontend cli: -fifocache.duration
  # fifocache_duration:

  # The number of entries to cache.
  # query-frontend cli: -fifocache.size
  # fifocache_size:

  # Most recent allowed cacheable result, to prevent caching very recent results
  # that might still be in flux. (default 1m0s)
  # query-frontend cli: -frontend.max-cache-freshness
  # frontend_max_cache_freshness:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # query-frontend cli: -httptest.serve
  # httptest_serve:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # query-frontend cli: -log.level
  # log_level:

  # How many chunks to buffer for background write back. (default 10000)
  # query-frontend cli: -memcache.write-back-buffer
  # memcache_write_back_buffer:

  # How many goroutines to use to write back to memcache. (default 10)
  # query-frontend cli: -memcache.write-back-goroutines
  # memcache_write_back_goroutines:

  # How many keys to fetch in each batch.
  # query-frontend cli: -memcached.batchsize
  # memcached_batchsize:

  # How long keys stay in the memcache.
  # query-frontend cli: -memcached.expiration
  # memcached_expiration:

  # Hostname for memcached service to use when caching chunks. If empty, no
  # memcached will be used.
  # query-frontend cli: -memcached.hostname
  # memcached_hostname:

  # Maximum number of idle connections in pool. (default 16)
  # query-frontend cli: -memcached.max-idle-conns
  # memcached_max_idle_conns:

  # Maximum active requests to memcache. (default 100)
  # query-frontend cli: -memcached.parallelism
  # memcached_parallelism:

  # SRV service used to discover memcache servers. (default "memcached")
  # query-frontend cli: -memcached.service
  # memcached_service:

  # Maximum time to wait before giving up on memcached requests. (default 100ms)
  # query-frontend cli: -memcached.timeout
  # memcached_timeout:

  # Period with which to poll DNS for memcache servers. (default 1m0s)
  # query-frontend cli: -memcached.update-interval
  # memcached_update_interval:

  # Mutate incoming queries to align their start and end with their step.
  # query-frontend cli: -querier.align-querier-with-step
  # querier_align_querier_with_step:

  # Cache query results.
  # query-frontend cli: -querier.cache-results
  # querier_cache_results:

  # Maximum number of outstanding requests per tenant per frontend; requests beyond
  # this error with HTTP 429. (default 100)
  # query-frontend cli: -querier.max-outstanding-requests-per-tenant
  # querier_max_outstanding_requests_per_tenant:

  # Maximum number of retries for a single request; beyond this, the downstream
  # error is returned. (default 5)
  # query-frontend cli: -querier.max-retries-per-request
  # querier_max_retries_per_request:

  # Split queries by day and execute in parallel.
  # query-frontend cli: -querier.split-queries-by-day
  # querier_split_queries_by_day:

  # Limit on the size of a grpc message this server can receive. (default 67108864)
  # query-frontend cli: -query-frontend.max-recv-message-size-bytes
  # query_frontend_max_recv_message_size_bytes:

  # Timeout for graceful shutdowns (default 30s)
  # query-frontend cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # query-frontend cli: -server.grpc-listen-port
  server_grpc_listen_port: "9095"

  # Idle timeout for HTTP server (default 2m0s)
  # query-frontend cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # query-frontend cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # query-frontend cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # query-frontend cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # query-frontend cli: -server.register-instrumentation
  # server_register_instrumentation:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/query-frontend
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095
    clusterIP: None

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
  #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

ruler:
  enabled: true

  replicaCount: 1

  # log to standard error as well as files
  # ruler cli: -alsologtostderr
  # alsologtostderr:

  # ApplicationAutoscaling endpoint URL with escaped Key and Secret encoded.
  # ruler cli: -applicationautoscaling.url
  # applicationautoscaling_url:

  # The date (in the format YYYY-MM-DD) after which we use bigtable column keys.
  # ruler cli: -bigtable.column-key-from
  # bigtable_column_key_from:

  # gRPC client max receive message size (bytes). (default 104857600)
  # ruler cli: -bigtable.grpc-max-recv-msg-size
  # bigtable_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # ruler cli: -bigtable.grpc-max-send-msg-size
  # bigtable_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # ruler cli: -bigtable.grpc-use-gzip-compression
  # bigtable_grpc_use_gzip_compression:

  # Bigtable instance ID.
  # ruler cli: -bigtable.instance
  # bigtable_instance:

  # Bigtable project ID.
  # ruler cli: -bigtable.project
  # bigtable_project:

  # points to the billing ingester sidecar (should be on localhost) (default
  # "localhost:24225")
  # ruler cli: -billing.ingester
  # billing_ingester:

  # Maximum number of billing events to buffer in memory (default 1024)
  # ruler cli: -billing.max-buffered-events
  # billing_max_buffered_events:

  # How often to retry sending events to the billing ingester. (default 500ms)
  # ruler cli: -billing.retry-delay
  # billing_retry_delay:

  # Location of BoltDB index files.
  # ruler cli: -boltdb.dir
  # boltdb_dir:

  # Cache config for chunks. Enable on-disk cache.
  # ruler cli: -cache.enable-diskcache
  # cache_enable_diskcache:

  # Cache config for chunks. Enable in-memory cache.
  # ruler cli: -cache.enable-fifocache
  # cache_enable_fifocache:

  # Comma-separated hostnames or ips of Cassandra instances.
  # ruler cli: -cassandra.addresses
  # cassandra_addresses:

  # Enable password authentication when connecting to cassandra.
  # ruler cli: -cassandra.auth
  # cassandra_auth:

  # Path to certificate file to verify the peer.
  # ruler cli: -cassandra.ca-path
  # cassandra_ca_path:

  # Consistency level for Cassandra. (default "QUORUM")
  # ruler cli: -cassandra.consistency
  # cassandra_consistency:

  # Instruct the cassandra driver to not attempt to get host info from the
  # system.peers table.
  # ruler cli: -cassandra.disable-initial-host-lookup
  # cassandra_disable_initial_host_lookup:

  # Require SSL certificate validation. (default true)
  # ruler cli: -cassandra.host-verification
  # cassandra_host_verification:

  # Keyspace to use in Cassandra.
  # ruler cli: -cassandra.keyspace
  # cassandra_keyspace:

  # Password to use when connecting to cassandra.
  # ruler cli: -cassandra.password
  # cassandra_password:

  # Port that Cassandra is running on (default 9042)
  # ruler cli: -cassandra.port
  # cassandra_port:

  # Replication factor to use in Cassandra. (default 1)
  # ruler cli: -cassandra.replication-factor
  # cassandra_replication_factor:

  # Use SSL when connecting to cassandra instances.
  # ruler cli: -cassandra.ssl
  # cassandra_ssl:

  # Timeout when connecting to cassandra. (default 600ms)
  # ruler cli: -cassandra.timeout
  # cassandra_timeout:

  # Username to use when connecting to cassandra.
  # ruler cli: -cassandra.username
  # cassandra_username:

  # Which storage client to use (aws, gcp, cassandra, inmemory). (default "aws")
  # ruler cli: -chunk.storage-client
  # chunk_storage_client:

  # Schema config yaml
  # ruler cli: -config-yaml
  # config_yaml:

  # ACL Token used to interact with Consul.
  # ruler cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # ruler cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # ruler cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # ruler cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # ruler cli: -consul.prefix
  # consul_prefix:

  # Path where the database migration files can be found
  # ruler cli: -database.migrations
  # database_migrations:

  # File containing password (username goes in URI)
  # ruler cli: -database.password-file
  # database_password_file:

  # URI where the database can be found (for dev you can use memory://) (default
  # "postgres://postgres@configs-db.weave.local/configs?sslmode=disable")
  # ruler cli: -database.uri
  # database_uri:

  # Cache config for chunks. The default validity of entries for caches unless
  # overridden.
  # ruler cli: -default-validity
  # default_validity:

  # Cache config for chunks. Path to file used to cache chunks. (default
  # "/var/run/chunks")
  # ruler cli: -diskcache.path
  # diskcache_path:

  # Cache config for chunks. Size of file (bytes) (default 1073741824)
  # ruler cli: -diskcache.size
  # diskcache_size:

  # How frequently to clean up clients for ingesters that have gone away. (default
  # 15s)
  # ruler cli: -distributor.client-cleanup-period
  # distributor_client_cleanup_period:

  # Report number of ingested samples to billing system.
  # ruler cli: -distributor.enable-billing
  # distributor_enable_billing:

  # Time to wait before sending more than the minimum successful query requests.
  # ruler cli: -distributor.extra-query-delay
  # distributor_extra_query_delay:

  # Run a health check on each ingester client during periodic cleanup.
  # ruler cli: -distributor.health-check-ingesters
  # distributor_health_check_ingesters:

  # Per-user allowed ingestion burst size (in number of samples). Warning, very
  # high limits will be reset every -distributor.limiter-reload-period. (default
  # 50000)
  # ruler cli: -distributor.ingestion-burst-size
  # distributor_ingestion_burst_size:

  # Per-user ingestion rate limit in samples per second. (default 25000)
  # ruler cli: -distributor.ingestion-rate-limit
  # distributor_ingestion_rate_limit:

  # Period at which to reload user ingestion limits. (default 5m0s)
  # ruler cli: -distributor.limiter-reload-period
  # distributor_limiter_reload_period:

  # Timeout for downstream ingesters. (default 2s)
  # ruler cli: -distributor.remote-timeout
  # distributor_remote_timeout:

  # The number of ingesters to write to and read from. (default 3)
  # ruler cli: -distributor.replication-factor
  # distributor_replication_factor:

  # Distribute samples based on all labels, as opposed to solely by user and metric
  # name.
  # ruler cli: -distributor.shard-by-all-labels
  # distributor_shard_by_all_labels:

  # DynamoDB table management requests per second limit. (default 2)
  # ruler cli: -dynamodb.api-limit
  # dynamodb_api_limit:

  # The date (in the format YYYY-MM-DD) after which we will stop querying to non-
  # base64 encoded values.
  # ruler cli: -dynamodb.base64-buckets-from
  # dynamodb_base64_buckets_from:

  # Date after which to write chunks to DynamoDB.
  # ruler cli: -dynamodb.chunk-table.from
  # dynamodb_chunk_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # ruler cli: -dynamodb.chunk-table.period
  # dynamodb_chunk_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_chunks_")
  # ruler cli: -dynamodb.chunk-table.prefix
  # dynamodb_chunk_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # ruler cli: -dynamodb.chunk-table.tag
  # dynamodb_chunk_table_tag:

  # Number of chunks to group together to parallelise fetches (zero to disable)
  # (default 10)
  # ruler cli: -dynamodb.chunk.gang.size
  # dynamodb_chunk_gang_size:

  # Max number of chunk-get operations to start in parallel (default 32)
  # ruler cli: -dynamodb.chunk.get.max.parallelism
  # dynamodb_chunk_get_max_parallelism:

  # The date (in the format YYYY-MM-DD) of the first day for which DynamoDB index
  # buckets should be day-sized vs. hour-sized.
  # ruler cli: -dynamodb.daily-buckets-from
  # dynamodb_daily_buckets_from:

  # Maximum backoff time (default 50s)
  # ruler cli: -dynamodb.max-backoff
  # dynamodb_max_backoff:

  # Maximum number of times to retry an operation (default 20)
  # ruler cli: -dynamodb.max-retries
  # dynamodb_max_retries:

  # Minimum backoff time (default 100ms)
  # ruler cli: -dynamodb.min-backoff
  # dynamodb_min_backoff:

  # The name of the DynamoDB table used before versioned schemas were introduced.
  # (default "cortex")
  # ruler cli: -dynamodb.original-table-name
  # dynamodb_original_table_name:

  # Date after which to use periodic tables.
  # ruler cli: -dynamodb.periodic-table.from
  # dynamodb_periodic_table_from:

  # DynamoDB table period. (default 168h0m0s)
  # ruler cli: -dynamodb.periodic-table.period
  # dynamodb_periodic_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_")
  # ruler cli: -dynamodb.periodic-table.prefix
  # dynamodb_periodic_table_prefix:

  # Tag (of the form key=value) to be added to all tables under management.
  # ruler cli: -dynamodb.periodic-table.tag
  # dynamodb_periodic_table_tag:

  # DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<table-
  # name> to use a mock in-memory implementation.
  # ruler cli: -dynamodb.url
  # dynamodb_url:

  # Should we use periodic tables.
  # ruler cli: -dynamodb.use-periodic-tables
  # dynamodb_use_periodic_tables:

  # The date (in the format YYYY-MM-DD) after which we enable v4 schema.
  # ruler cli: -dynamodb.v4-schema-from
  # dynamodb_v4_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v5 schema.
  # ruler cli: -dynamodb.v5-schema-from
  # dynamodb_v5_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v6 schema.
  # ruler cli: -dynamodb.v6-schema-from
  # dynamodb_v6_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v9 schema (Series
  # indexing).
  # ruler cli: -dynamodb.v9-schema-from
  # dynamodb_v9_schema_from:

  # Cache config for chunks. The expiry duration for the cache.
  # ruler cli: -fifocache.duration
  # fifocache_duration:

  # Cache config for chunks. The number of entries to cache.
  # ruler cli: -fifocache.size
  # fifocache_size:

  # Name of GCS bucket to put chunks in.
  # ruler cli: -gcs.bucketname
  # gcs_bucketname:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # ruler cli: -httptest.serve
  # httptest_serve:

  # gRPC client max receive message size (bytes). (default 104857600)
  # ruler cli: -ingester.client.grpc-max-recv-msg-size
  # ingester_client_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # ruler cli: -ingester.client.grpc-max-send-msg-size
  # ingester_client_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # ruler cli: -ingester.client.grpc-use-gzip-compression
  # ingester_client_grpc_use_gzip_compression:

  # The maximum number of samples that a query can return. (default 1000000)
  # ruler cli: -ingester.max-samples-per-query
  # ingester_max_samples_per_query:

  # Maximum number of active series per metric name. (default 50000)
  # ruler cli: -ingester.max-series-per-metric
  # ingester_max_series_per_metric:

  # The maximum number of series that a query can return. (default 100000)
  # ruler cli: -ingester.max-series-per-query
  # ingester_max_series_per_query:

  # Maximum number of active series per user. (default 5000000)
  # ruler cli: -ingester.max-series-per-user
  # ingester_max_series_per_user:

  # File name of per-user overrides.
  # ruler cli: -limits.per-user-override-config
  # limits_per_user_override_config:

  # Period with this to reload the overrides. (default 10s)
  # ruler cli: -limits.per-user-override-period
  # limits_per_user_override_period:

  # Directory to store chunks in.
  # ruler cli: -local.chunk-directory
  # local_chunk_directory:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # ruler cli: -log.level
  # log_level:

  # when logging hits line file:N, emit a stack trace
  # ruler cli: -log_backtrace_at
  # log_backtrace_at:

  # If non-empty, write log files in this directory
  # ruler cli: -log_dir
  # log_dir:

  # log to standard error instead of files
  # ruler cli: -logtostderr
  # logtostderr:

  # Cache config for chunks. How many chunks to buffer for background write back.
  # (default 10000)
  # ruler cli: -memcache.write-back-buffer
  # memcache_write_back_buffer:

  # Cache config for chunks. How many goroutines to use to write back to memcache.
  # (default 10)
  # ruler cli: -memcache.write-back-goroutines
  # memcache_write_back_goroutines:

  # Cache config for chunks. How many keys to fetch in each batch.
  # ruler cli: -memcached.batchsize
  # memcached_batchsize:

  # Cache config for chunks. How long keys stay in the memcache.
  # ruler cli: -memcached.expiration
  # memcached_expiration:

  # Cache config for chunks. Hostname for memcached service to use when caching
  # chunks. If empty, no memcached will be used.
  # ruler cli: -memcached.hostname
  # memcached_hostname:

  # Cache config for chunks. Maximum number of idle connections in pool. (default
  # 16)
  # ruler cli: -memcached.max-idle-conns
  # memcached_max_idle_conns:

  # Cache config for chunks. Maximum active requests to memcache. (default 100)
  # ruler cli: -memcached.parallelism
  # memcached_parallelism:

  # Cache config for chunks. SRV service used to discover memcache servers.
  # (default "memcached")
  # ruler cli: -memcached.service
  # memcached_service:

  # Cache config for chunks. Maximum time to wait before giving up on memcached
  # requests. (default 100ms)
  # ruler cli: -memcached.timeout
  # memcached_timeout:

  # Cache config for chunks. Period with which to poll DNS for memcache servers.
  # (default 1m0s)
  # ruler cli: -memcached.update-interval
  # memcached_update_interval:

  # query to fetch error rates per table (default "sum(rate(cortex_dynamo_failures_
  # total{error="ProvisionedThroughputExceededException",operation=~".*Write.*"}[1m
  # ])) by (table) > 0")
  # ruler cli: -metrics.error-rate-query
  # metrics_error_rate_query:

  # query to fetch ingester queue length (default "sum(avg_over_time(cortex_ingeste
  # r_flush_queue_length{job="cortex/ingester"}[2m]))")
  # ruler cli: -metrics.queue-length-query
  # metrics_queue_length_query:

  # query to fetch read errors per table (default "sum(increase(cortex_dynamo_failu
  # res_total{operation="DynamoDB.QueryPages",error="ProvisionedThroughputExceededE
  # xception"}[1m])) by (table) > 0")
  # ruler cli: -metrics.read-error-query
  # metrics_read_error_query:

  # query to fetch read capacity usage per table (default "sum(rate(cortex_dynamo_c
  # onsumed_capacity_total{operation="DynamoDB.QueryPages"}[1h])) by (table) > 0")
  # ruler cli: -metrics.read-usage-query
  # metrics_read_usage_query:

  # Scale up capacity by this multiple (default 1.3)
  # ruler cli: -metrics.scale-up-factor
  # metrics_scale_up_factor:

  # Queue length above which we will scale up capacity (default 100000)
  # ruler cli: -metrics.target-queue-length
  # metrics_target_queue_length:

  # Use metrics-based autoscaling, via this query URL
  # ruler cli: -metrics.url
  # metrics_url:

  # query to fetch write capacity usage per table (default "sum(rate(cortex_dynamo_
  # consumed_capacity_total{operation="DynamoDB.BatchWriteItem"}[15m])) by (table)
  # > 0")
  # ruler cli: -metrics.usage-query
  # metrics_usage_query:

  # Time since the last sample after which a time series is considered stale and
  # ignored by expression evaluations. (default 5m0s)
  # ruler cli: -promql.lookback-delta
  # promql_lookback_delta:

  # Use batch iterators to execute query, as opposed to fully materialising the
  # series in memory.  Takes precedent over the -querier.iterators flag.
  # ruler cli: -querier.batch-iterators
  # querier_batch_iterators:

  # Use streaming RPCs to query ingester.
  # ruler cli: -querier.ingester-streaming
  # querier_ingester_streaming:

  # Use iterators to execute query, as opposed to fully materialising the series in
  # memory.
  # ruler cli: -querier.iterators
  # querier_iterators:

  # The maximum number of concurrent queries. (default 20)
  # ruler cli: -querier.max-concurrent
  # querier_max_concurrent:

  # Maximum number of samples a single query can load into memory. (default
  # 50000000)
  # ruler cli: -querier.max-samples
  # querier_max_samples:

  # Maximum lookback beyond which queries are not sent to ingester. 0 means all
  # queries are sent to ingester.
  # ruler cli: -querier.query-ingesters-within
  # querier_query_ingesters_within:

  # The timeout for a query. (default 2m0s)
  # ruler cli: -querier.timeout
  # querier_timeout:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # ruler cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # ruler cli: -ring.store
  # ring_store:

  # Use DNS SRV records to discover alertmanager hosts.
  # ruler cli: -ruler.alertmanager-discovery
  # ruler_alertmanager_discovery:

  # How long to wait between refreshing alertmanager hosts. (default 1m0s)
  # ruler cli: -ruler.alertmanager-refresh-interval
  # ruler_alertmanager_refresh_interval:

  # URL of the Alertmanager to send notifications to.
  # ruler cli: -ruler.alertmanager-url
  # ruler_alertmanager_url:

  # How frequently to evaluate rules (default 15s)
  # ruler cli: -ruler.evaluation-interval
  # ruler_evaluation_interval:

  # URL of alerts return path.
  # ruler cli: -ruler.external.url
  # ruler_external_url:

  # Timeout for rule group evaluation, including sending result to ingester
  # (default 10s)
  # ruler cli: -ruler.group-timeout
  # ruler_group_timeout:

  # Capacity of the queue for notifications to be sent to the Alertmanager.
  # (default 10000)
  # ruler cli: -ruler.notification-queue-capacity
  # ruler_notification_queue_capacity:

  # HTTP timeout duration when sending notifications to the Alertmanager. (default
  # 10s)
  # ruler cli: -ruler.notification-timeout
  # ruler_notification_timeout:

  # Number of rule evaluator worker routines in this process (default 1)
  # ruler cli: -ruler.num-workers
  # ruler_num_workers:

  # S3 endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<bucket-
  # name> to use a mock in-memory implementation.
  # ruler cli: -s3.url
  # s3_url:

  # Timeout for graceful shutdowns (default 30s)
  # ruler cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # ruler cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # ruler cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # ruler cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # ruler cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # ruler cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # ruler cli: -server.register-instrumentation
  # server_register_instrumentation:

  # logs at or above this threshold go to stderr
  # ruler cli: -stderrthreshold
  # stderrthreshold:

  # Cache index entries older than this period. 0 to disable.
  # ruler cli: -store.cache-lookups-older-than
  # store_cache_lookups_older_than:

  # Size of in-memory cardinality cache, 0 to disable.
  # ruler cli: -store.cardinality-cache-size
  # store_cardinality_cache_size:

  # Period for which entries in the cardinality cache are valid. (default 1h0m0s)
  # ruler cli: -store.cardinality-cache-validity
  # store_cardinality_cache_validity:

  # Cardinality limit for index queries. (default 100000)
  # ruler cli: -store.cardinality-limit
  # store_cardinality_limit:

  # Cache config for index entry reading. Enable on-disk cache.
  # ruler cli: -store.index-cache-read.cache.enable-diskcache
  # store_index_cache_read_cache_enable_diskcache:

  # Cache config for index entry reading. Enable in-memory cache.
  # ruler cli: -store.index-cache-read.cache.enable-fifocache
  # store_index_cache_read_cache_enable_fifocache:

  # Cache config for index entry reading. The default validity of entries for
  # caches unless overridden.
  # ruler cli: -store.index-cache-read.default-validity
  # store_index_cache_read_default_validity:

  # Cache config for index entry reading. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # ruler cli: -store.index-cache-read.diskcache.path
  # store_index_cache_read_diskcache_path:

  # Cache config for index entry reading. Size of file (bytes) (default 1073741824)
  # ruler cli: -store.index-cache-read.diskcache.size
  # store_index_cache_read_diskcache_size:

  # Cache config for index entry reading. The expiry duration for the cache.
  # ruler cli: -store.index-cache-read.fifocache.duration
  # store_index_cache_read_fifocache_duration:

  # Cache config for index entry reading. The number of entries to cache.
  # ruler cli: -store.index-cache-read.fifocache.size
  # store_index_cache_read_fifocache_size:

  # Cache config for index entry reading. How many chunks to buffer for background
  # write back. (default 10000)
  # ruler cli: -store.index-cache-read.memcache.write-back-buffer
  # store_index_cache_read_memcache_write_back_buffer:

  # Cache config for index entry reading. How many goroutines to use to write back
  # to memcache. (default 10)
  # ruler cli: -store.index-cache-read.memcache.write-back-goroutines
  # store_index_cache_read_memcache_write_back_goroutines:

  # Cache config for index entry reading. How many keys to fetch in each batch.
  # ruler cli: -store.index-cache-read.memcached.batchsize
  # store_index_cache_read_memcached_batchsize:

  # Cache config for index entry reading. How long keys stay in the memcache.
  # ruler cli: -store.index-cache-read.memcached.expiration
  # store_index_cache_read_memcached_expiration:

  # Cache config for index entry reading. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # ruler cli: -store.index-cache-read.memcached.hostname
  # store_index_cache_read_memcached_hostname:

  # Cache config for index entry reading. Maximum number of idle connections in
  # pool. (default 16)
  # ruler cli: -store.index-cache-read.memcached.max-idle-conns
  # store_index_cache_read_memcached_max_idle_conns:

  # Cache config for index entry reading. Maximum active requests to memcache.
  # (default 100)
  # ruler cli: -store.index-cache-read.memcached.parallelism
  # store_index_cache_read_memcached_parallelism:

  # Cache config for index entry reading. SRV service used to discover memcache
  # servers. (default "memcached")
  # ruler cli: -store.index-cache-read.memcached.service
  # store_index_cache_read_memcached_service:

  # Cache config for index entry reading. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # ruler cli: -store.index-cache-read.memcached.timeout
  # store_index_cache_read_memcached_timeout:

  # Cache config for index entry reading. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # ruler cli: -store.index-cache-read.memcached.update-interval
  # store_index_cache_read_memcached_update_interval:

  # Cache validity for active index entries. Should be no higher than
  # -ingester.max-chunk-idle. (default 5m0s)
  # ruler cli: -store.index-cache-validity
  # store_index_cache_validity:

  # Cache config for index entry writing. Enable on-disk cache.
  # ruler cli: -store.index-cache-write.cache.enable-diskcache
  # store_index_cache_write_cache_enable_diskcache:

  # Cache config for index entry writing. Enable in-memory cache.
  # ruler cli: -store.index-cache-write.cache.enable-fifocache
  # store_index_cache_write_cache_enable_fifocache:

  # Cache config for index entry writing. The default validity of entries for
  # caches unless overridden.
  # ruler cli: -store.index-cache-write.default-validity
  # store_index_cache_write_default_validity:

  # Cache config for index entry writing. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # ruler cli: -store.index-cache-write.diskcache.path
  # store_index_cache_write_diskcache_path:

  # Cache config for index entry writing. Size of file (bytes) (default 1073741824)
  # ruler cli: -store.index-cache-write.diskcache.size
  # store_index_cache_write_diskcache_size:

  # Cache config for index entry writing. The expiry duration for the cache.
  # ruler cli: -store.index-cache-write.fifocache.duration
  # store_index_cache_write_fifocache_duration:

  # Cache config for index entry writing. The number of entries to cache.
  # ruler cli: -store.index-cache-write.fifocache.size
  # store_index_cache_write_fifocache_size:

  # Cache config for index entry writing. How many chunks to buffer for background
  # write back. (default 10000)
  # ruler cli: -store.index-cache-write.memcache.write-back-buffer
  # store_index_cache_write_memcache_write_back_buffer:

  # Cache config for index entry writing. How many goroutines to use to write back
  # to memcache. (default 10)
  # ruler cli: -store.index-cache-write.memcache.write-back-goroutines
  # store_index_cache_write_memcache_write_back_goroutines:

  # Cache config for index entry writing. How many keys to fetch in each batch.
  # ruler cli: -store.index-cache-write.memcached.batchsize
  # store_index_cache_write_memcached_batchsize:

  # Cache config for index entry writing. How long keys stay in the memcache.
  # ruler cli: -store.index-cache-write.memcached.expiration
  # store_index_cache_write_memcached_expiration:

  # Cache config for index entry writing. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # ruler cli: -store.index-cache-write.memcached.hostname
  # store_index_cache_write_memcached_hostname:

  # Cache config for index entry writing. Maximum number of idle connections in
  # pool. (default 16)
  # ruler cli: -store.index-cache-write.memcached.max-idle-conns
  # store_index_cache_write_memcached_max_idle_conns:

  # Cache config for index entry writing. Maximum active requests to memcache.
  # (default 100)
  # ruler cli: -store.index-cache-write.memcached.parallelism
  # store_index_cache_write_memcached_parallelism:

  # Cache config for index entry writing. SRV service used to discover memcache
  # servers. (default "memcached")
  # ruler cli: -store.index-cache-write.memcached.service
  # store_index_cache_write_memcached_service:

  # Cache config for index entry writing. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # ruler cli: -store.index-cache-write.memcached.timeout
  # store_index_cache_write_memcached_timeout:

  # Cache config for index entry writing. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # ruler cli: -store.index-cache-write.memcached.update-interval
  # store_index_cache_write_memcached_update_interval:

  # Limit to length of chunk store queries, 0 to disable.
  # ruler cli: -store.max-query-length
  # store_max_query_length:

  # Minimum time between chunk update and being saved to the store.
  # ruler cli: -store.min-chunk-age
  # store_min_chunk_age:

  # Maximum number of chunks that can be fetched in a single query. (default
  # 2000000)
  # ruler cli: -store.query-chunk-limit
  # store_query_chunk_limit:

  # log level for V logs
  # ruler cli: -v
  # v:

  # Duration which table will be created/deleted before/after it's needed; we won't
  # accept sample from before this time. (default 10m0s)
  # ruler cli: -validation.create-grace-period
  # validation_create_grace_period:

  # Maximum number of label names per series. (default 30)
  # ruler cli: -validation.max-label-names-per-series
  # validation_max_label_names_per_series:

  # Maximum length accepted for label names (default 1024)
  # ruler cli: -validation.max-length-label-name
  # validation_max_length_label_name:

  # Maximum length accepted for label value. This setting also applies to the
  # metric name (default 2048)
  # ruler cli: -validation.max-length-label-value
  # validation_max_length_label_value:

  # Reject old samples.
  # ruler cli: -validation.reject-old-samples
  # validation_reject_old_samples:

  # Maximum accepted sample age before rejecting. (default 336h0m0s)
  # ruler cli: -validation.reject-old-samples.max-age
  # validation_reject_old_samples_max_age:

  # comma-separated list of pattern=N settings for file-filtered logging
  # ruler cli: -vmodule
  # vmodule:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/ruler
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

table_manager:
  enabled: true

  replicaCount: 1

  # ApplicationAutoscaling endpoint URL with escaped Key and Secret encoded.
  # table-manager cli: -applicationautoscaling.url
  # applicationautoscaling_url:

  # The date (in the format YYYY-MM-DD) after which we use bigtable column keys.
  # table-manager cli: -bigtable.column-key-from
  # bigtable_column_key_from:

  # gRPC client max receive message size (bytes). (default 104857600)
  # table-manager cli: -bigtable.grpc-max-recv-msg-size
  # bigtable_grpc_max_recv_msg_size:

  # gRPC client max send message size (bytes). (default 16777216)
  # table-manager cli: -bigtable.grpc-max-send-msg-size
  # bigtable_grpc_max_send_msg_size:

  # Use compression when sending messages.
  # table-manager cli: -bigtable.grpc-use-gzip-compression
  # bigtable_grpc_use_gzip_compression:

  # Bigtable instance ID.
  # table-manager cli: -bigtable.instance
  # bigtable_instance:

  # Bigtable project ID.
  # table-manager cli: -bigtable.project
  # bigtable_project:

  # Location of BoltDB index files.
  # table-manager cli: -boltdb.dir
  # boltdb_dir:

  # Comma-separated hostnames or ips of Cassandra instances.
  # table-manager cli: -cassandra.addresses
  # cassandra_addresses:

  # Enable password authentication when connecting to cassandra.
  # table-manager cli: -cassandra.auth
  # cassandra_auth:

  # Path to certificate file to verify the peer.
  # table-manager cli: -cassandra.ca-path
  # cassandra_ca_path:

  # Consistency level for Cassandra. (default "QUORUM")
  # table-manager cli: -cassandra.consistency
  # cassandra_consistency:

  # Instruct the cassandra driver to not attempt to get host info from the
  # system.peers table.
  # table-manager cli: -cassandra.disable-initial-host-lookup
  # cassandra_disable_initial_host_lookup:

  # Require SSL certificate validation. (default true)
  # table-manager cli: -cassandra.host-verification
  # cassandra_host_verification:

  # Keyspace to use in Cassandra.
  # table-manager cli: -cassandra.keyspace
  # cassandra_keyspace:

  # Password to use when connecting to cassandra.
  # table-manager cli: -cassandra.password
  # cassandra_password:

  # Port that Cassandra is running on (default 9042)
  # table-manager cli: -cassandra.port
  # cassandra_port:

  # Replication factor to use in Cassandra. (default 1)
  # table-manager cli: -cassandra.replication-factor
  # cassandra_replication_factor:

  # Use SSL when connecting to cassandra instances.
  # table-manager cli: -cassandra.ssl
  # cassandra_ssl:

  # Timeout when connecting to cassandra. (default 600ms)
  # table-manager cli: -cassandra.timeout
  # cassandra_timeout:

  # Username to use when connecting to cassandra.
  # table-manager cli: -cassandra.username
  # cassandra_username:

  # Which storage client to use (aws, gcp, cassandra, inmemory). (default "aws")
  # table-manager cli: -chunk.storage-client
  # chunk_storage_client:

  # Schema config yaml
  # table-manager cli: -config-yaml
  # config_yaml:

  # ACL Token used to interact with Consul.
  # table-manager cli: -consul.acltoken
  # consul_acltoken:

  # HTTP timeout when talking to consul (default 20s)
  # table-manager cli: -consul.client-timeout
  # consul_client_timeout:

  # Enable consistent reads to consul. (default true)
  # table-manager cli: -consul.consistent-reads
  # consul_consistent_reads:

  # Hostname and port of Consul. (default "localhost:8500")
  # table-manager cli: -consul.hostname
  # consul_hostname:

  # Prefix for keys in Consul. (default "collectors/")
  # table-manager cli: -consul.prefix
  # consul_prefix:

  # The number of ingesters to write to and read from. (default 3)
  # table-manager cli: -distributor.replication-factor
  # distributor_replication_factor:

  # DynamoDB table management requests per second limit. (default 2)
  # table-manager cli: -dynamodb.api-limit
  # dynamodb_api_limit:

  # The date (in the format YYYY-MM-DD) after which we will stop querying to non-
  # base64 encoded values.
  # table-manager cli: -dynamodb.base64-buckets-from
  # dynamodb_base64_buckets_from:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # table-manager cli: -dynamodb.chunk-table.enable-ondemand-throughput-mode
  # dynamodb_chunk_table_enable_ondemand_throughput_mode:

  # Date after which to write chunks to DynamoDB.
  # table-manager cli: -dynamodb.chunk-table.from
  # dynamodb_chunk_table_from:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # table-manager cli: -dynamodb.chunk-table.inactive-enable-ondemand-throughput-mode
  # dynamodb_chunk_table_inactive_enable_ondemand_throughput_mode:

  # DynamoDB table read throughput for inactive tables. (default 300)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput
  # dynamodb_chunk_table_inactive_read_throughput:

  # Number of last inactive tables to enable read autoscale. (default 4)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale-last-n
  # dynamodb_chunk_table_inactive_read_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.enabled
  # dynamodb_chunk_table_inactive_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.in-cooldown
  # dynamodb_chunk_table_inactive_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.max-capacity
  # dynamodb_chunk_table_inactive_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.min-capacity
  # dynamodb_chunk_table_inactive_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.out-cooldown
  # dynamodb_chunk_table_inactive_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.role-arn
  # dynamodb_chunk_table_inactive_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.chunk-table.inactive-read-throughput.scale.target-value
  # dynamodb_chunk_table_inactive_read_throughput_scale_target_value:

  # DynamoDB table write throughput for inactive tables. (default 1)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput
  # dynamodb_chunk_table_inactive_write_throughput:

  # Number of last inactive tables to enable write autoscale. (default 4)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale-last-n
  # dynamodb_chunk_table_inactive_write_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.enabled
  # dynamodb_chunk_table_inactive_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.in-cooldown
  # dynamodb_chunk_table_inactive_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.max-capacity
  # dynamodb_chunk_table_inactive_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.min-capacity
  # dynamodb_chunk_table_inactive_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.out-cooldown
  # dynamodb_chunk_table_inactive_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.role-arn
  # dynamodb_chunk_table_inactive_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.chunk-table.inactive-write-throughput.scale.target-value
  # dynamodb_chunk_table_inactive_write_throughput_scale_target_value:

  # DynamoDB table period. (default 168h0m0s)
  # table-manager cli: -dynamodb.chunk-table.period
  # dynamodb_chunk_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_chunks_")
  # table-manager cli: -dynamodb.chunk-table.prefix
  # dynamodb_chunk_table_prefix:

  # DynamoDB table default read throughput. (default 300)
  # table-manager cli: -dynamodb.chunk-table.read-throughput
  # dynamodb_chunk_table_read_throughput:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.enabled
  # dynamodb_chunk_table_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.in-cooldown
  # dynamodb_chunk_table_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.max-capacity
  # dynamodb_chunk_table_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.min-capacity
  # dynamodb_chunk_table_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.out-cooldown
  # dynamodb_chunk_table_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.role-arn
  # dynamodb_chunk_table_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.chunk-table.read-throughput.scale.target-value
  # dynamodb_chunk_table_read_throughput_scale_target_value:

  # Tag (of the form key=value) to be added to all tables under management.
  # table-manager cli: -dynamodb.chunk-table.tag
  # dynamodb_chunk_table_tag:

  # DynamoDB table default write throughput. (default 3000)
  # table-manager cli: -dynamodb.chunk-table.write-throughput
  # dynamodb_chunk_table_write_throughput:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.enabled
  # dynamodb_chunk_table_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.in-cooldown
  # dynamodb_chunk_table_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.max-capacity
  # dynamodb_chunk_table_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.min-capacity
  # dynamodb_chunk_table_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.out-cooldown
  # dynamodb_chunk_table_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.role-arn
  # dynamodb_chunk_table_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.chunk-table.write-throughput.scale.target-value
  # dynamodb_chunk_table_write_throughput_scale_target_value:

  # Number of chunks to group together to parallelise fetches (zero to disable)
  # (default 10)
  # table-manager cli: -dynamodb.chunk.gang.size
  # dynamodb_chunk_gang_size:

  # Max number of chunk-get operations to start in parallel (default 32)
  # table-manager cli: -dynamodb.chunk.get.max.parallelism
  # dynamodb_chunk_get_max_parallelism:

  # The date (in the format YYYY-MM-DD) of the first day for which DynamoDB index
  # buckets should be day-sized vs. hour-sized.
  # table-manager cli: -dynamodb.daily-buckets-from
  # dynamodb_daily_buckets_from:

  # Maximum backoff time (default 50s)
  # table-manager cli: -dynamodb.max-backoff
  # dynamodb_max_backoff:

  # Maximum number of times to retry an operation (default 20)
  # table-manager cli: -dynamodb.max-retries
  # dynamodb_max_retries:

  # Minimum backoff time (default 100ms)
  # table-manager cli: -dynamodb.min-backoff
  # dynamodb_min_backoff:

  # The name of the DynamoDB table used before versioned schemas were introduced.
  # (default "cortex")
  # table-manager cli: -dynamodb.original-table-name
  # dynamodb_original_table_name:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # table-manager cli: -dynamodb.periodic-table.enable-ondemand-throughput-mode
  # dynamodb_periodic_table_enable_ondemand_throughput_mode:

  # Date after which to use periodic tables.
  # table-manager cli: -dynamodb.periodic-table.from
  # dynamodb_periodic_table_from:

  # DynamoDB periodic tables grace period (duration which table will be
  # created/deleted before/after it's needed). (default 10m0s)
  # table-manager cli: -dynamodb.periodic-table.grace-period
  # dynamodb_periodic_table_grace_period:

  # Enables on demand througput provisioning for the storage provider (if
  # supported). Applies only to tables which are not autoscaled
  # table-manager cli: -dynamodb.periodic-table.inactive-enable-ondemand-throughput-mode
  # dynamodb_periodic_table_inactive_enable_ondemand_throughput_mode:

  # DynamoDB table read throughput for inactive tables. (default 300)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput
  # dynamodb_periodic_table_inactive_read_throughput:

  # Number of last inactive tables to enable read autoscale. (default 4)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale-last-n
  # dynamodb_periodic_table_inactive_read_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.enabled
  # dynamodb_periodic_table_inactive_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.in-cooldown
  # dynamodb_periodic_table_inactive_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.max-capacity
  # dynamodb_periodic_table_inactive_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.min-capacity
  # dynamodb_periodic_table_inactive_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.out-cooldown
  # dynamodb_periodic_table_inactive_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.role-arn
  # dynamodb_periodic_table_inactive_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.periodic-table.inactive-read-throughput.scale.target-value
  # dynamodb_periodic_table_inactive_read_throughput_scale_target_value:

  # DynamoDB table write throughput for inactive tables. (default 1)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput
  # dynamodb_periodic_table_inactive_write_throughput:

  # Number of last inactive tables to enable write autoscale. (default 4)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale-last-n
  # dynamodb_periodic_table_inactive_write_throughput_scale_last_n:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.enabled
  # dynamodb_periodic_table_inactive_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.in-cooldown
  # dynamodb_periodic_table_inactive_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.max-capacity
  # dynamodb_periodic_table_inactive_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.min-capacity
  # dynamodb_periodic_table_inactive_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.out-cooldown
  # dynamodb_periodic_table_inactive_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.role-arn
  # dynamodb_periodic_table_inactive_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.periodic-table.inactive-write-throughput.scale.target-value
  # dynamodb_periodic_table_inactive_write_throughput_scale_target_value:

  # DynamoDB table period. (default 168h0m0s)
  # table-manager cli: -dynamodb.periodic-table.period
  # dynamodb_periodic_table_period:

  # DynamoDB table prefix for period tables. (default "cortex_")
  # table-manager cli: -dynamodb.periodic-table.prefix
  # dynamodb_periodic_table_prefix:

  # DynamoDB table default read throughput. (default 300)
  # table-manager cli: -dynamodb.periodic-table.read-throughput
  # dynamodb_periodic_table_read_throughput:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.enabled
  # dynamodb_periodic_table_read_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.in-cooldown
  # dynamodb_periodic_table_read_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.max-capacity
  # dynamodb_periodic_table_read_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.min-capacity
  # dynamodb_periodic_table_read_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.out-cooldown
  # dynamodb_periodic_table_read_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.role-arn
  # dynamodb_periodic_table_read_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.periodic-table.read-throughput.scale.target-value
  # dynamodb_periodic_table_read_throughput_scale_target_value:

  # Tag (of the form key=value) to be added to all tables under management.
  # table-manager cli: -dynamodb.periodic-table.tag
  # dynamodb_periodic_table_tag:

  # DynamoDB table default write throughput. (default 3000)
  # table-manager cli: -dynamodb.periodic-table.write-throughput
  # dynamodb_periodic_table_write_throughput:

  # Should we enable autoscale for the table.
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.enabled
  # dynamodb_periodic_table_write_throughput_scale_enabled:

  # DynamoDB minimum seconds between each autoscale down. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.in-cooldown
  # dynamodb_periodic_table_write_throughput_scale_in_cooldown:

  # DynamoDB maximum provision capacity. (default 6000)
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.max-capacity
  # dynamodb_periodic_table_write_throughput_scale_max_capacity:

  # DynamoDB minimum provision capacity. (default 3000)
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.min-capacity
  # dynamodb_periodic_table_write_throughput_scale_min_capacity:

  # DynamoDB minimum seconds between each autoscale up. (default 1800)
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.out-cooldown
  # dynamodb_periodic_table_write_throughput_scale_out_cooldown:

  # AWS AutoScaling role ARN
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.role-arn
  # dynamodb_periodic_table_write_throughput_scale_role_arn:

  # DynamoDB target ratio of consumed capacity to provisioned capacity. (default
  # 80)
  # table-manager cli: -dynamodb.periodic-table.write-throughput.scale.target-value
  # dynamodb_periodic_table_write_throughput_scale_target_value:

  # How frequently to poll DynamoDB to learn our capacity. (default 2m0s)
  # table-manager cli: -dynamodb.poll-interval
  # dynamodb_poll_interval:

  # DynamoDB endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<table-
  # name> to use a mock in-memory implementation.
  # table-manager cli: -dynamodb.url
  # dynamodb_url:

  # Should we use periodic tables.
  # table-manager cli: -dynamodb.use-periodic-tables
  # dynamodb_use_periodic_tables:

  # The date (in the format YYYY-MM-DD) after which we enable v4 schema.
  # table-manager cli: -dynamodb.v4-schema-from
  # dynamodb_v4_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v5 schema.
  # table-manager cli: -dynamodb.v5-schema-from
  # dynamodb_v5_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v6 schema.
  # table-manager cli: -dynamodb.v6-schema-from
  # dynamodb_v6_schema_from:

  # The date (in the format YYYY-MM-DD) after which we enable v9 schema (Series
  # indexing).
  # table-manager cli: -dynamodb.v9-schema-from
  # dynamodb_v9_schema_from:

  # Name of GCS bucket to put chunks in.
  # table-manager cli: -gcs.bucketname
  # gcs_bucketname:

  # if non-empty, httptest.NewServer serves on this address and blocks
  # table-manager cli: -httptest.serve
  # httptest_serve:

  # ID to register into consul. (default "b3e9b7f8b3b7")
  # table-manager cli: -ingester.ID
  # ingester_ID:

  # IP address to advertise in consul.
  # table-manager cli: -ingester.addr
  # ingester_addr:

  # Range of time to subtract from MaxChunkAge to spread out flushes (default
  # 20m0s)
  # table-manager cli: -ingester.chunk-age-jitter
  # ingester_chunk_age_jitter:

  # Send chunks to PENDING ingesters on exit.
  # table-manager cli: -ingester.claim-on-rollout
  # ingester_claim_on_rollout:

  # Number of concurrent goroutines flushing to dynamodb. (default 50)
  # table-manager cli: -ingester.concurrent-flushes
  # ingester_concurrent_flushes:

  # Timeout for individual flush operations. (default 1m0s)
  # table-manager cli: -ingester.flush-op-timeout
  # ingester_flush_op_timeout:

  # Period with which to attempt to flush chunks. (default 1m0s)
  # table-manager cli: -ingester.flush-period
  # ingester_flush_period:

  # Period at which to heartbeat to consul. (default 5s)
  # table-manager cli: -ingester.heartbeat-period
  # ingester_heartbeat_period:

  # Name of network interface to read address from. (default [eth0 en0])
  # table-manager cli: -ingester.interface
  # ingester_interface:

  # Period to wait for a claim from another ingester; will join automatically after
  # this.
  # table-manager cli: -ingester.join-after
  # ingester_join_after:

  # Maximum chunk age before flushing. (default 12h0m0s)
  # table-manager cli: -ingester.max-chunk-age
  # ingester_max_chunk_age:

  # Maximum chunk idle time before flushing. (default 5m0s)
  # table-manager cli: -ingester.max-chunk-idle
  # ingester_max_chunk_idle:

  # Minimum duration to wait before becoming ready. This is to work around race
  # conditions with ingesters exiting and updating the ring. (default 1m0s)
  # table-manager cli: -ingester.min-ready-duration
  # ingester_min_ready_duration:

  # Store tokens in a normalised fashion to reduce allocations.
  # table-manager cli: -ingester.normalise-tokens
  # ingester_normalise_tokens:

  # Number of tokens for each ingester. (default 128)
  # table-manager cli: -ingester.num-tokens
  # ingester_num_tokens:

  # port to advertise in consul (defaults to server.grpc-listen-port).
  # table-manager cli: -ingester.port
  # ingester_port:

  # Period with which to update the per-user ingestion rates. (default 15s)
  # table-manager cli: -ingester.rate-update-period
  # ingester_rate_update_period:

  # Period chunks will remain in memory after flushing. (default 5m0s)
  # table-manager cli: -ingester.retain-period
  # ingester_retain_period:

  # Time to spend searching for a pending ingester when shutting down. (default
  # 30s)
  # table-manager cli: -ingester.search-pending-for
  # ingester_search_pending_for:

  # Directory to store chunks in.
  # table-manager cli: -local.chunk-directory
  # local_chunk_directory:

  # Only log messages with the given severity or above. Valid levels: [debug, info,
  # warn, error] (default info)
  # table-manager cli: -log.level
  # log_level:

  # query to fetch error rates per table (default "sum(rate(cortex_dynamo_failures_
  # total{error="ProvisionedThroughputExceededException",operation=~".*Write.*"}[1m
  # ])) by (table) > 0")
  # table-manager cli: -metrics.error-rate-query
  # metrics_error_rate_query:

  # query to fetch ingester queue length (default "sum(avg_over_time(cortex_ingeste
  # r_flush_queue_length{job="cortex/ingester"}[2m]))")
  # table-manager cli: -metrics.queue-length-query
  # metrics_queue_length_query:

  # query to fetch read errors per table (default "sum(increase(cortex_dynamo_failu
  # res_total{operation="DynamoDB.QueryPages",error="ProvisionedThroughputExceededE
  # xception"}[1m])) by (table) > 0")
  # table-manager cli: -metrics.read-error-query
  # metrics_read_error_query:

  # query to fetch read capacity usage per table (default "sum(rate(cortex_dynamo_c
  # onsumed_capacity_total{operation="DynamoDB.QueryPages"}[1h])) by (table) > 0")
  # table-manager cli: -metrics.read-usage-query
  # metrics_read_usage_query:

  # Scale up capacity by this multiple (default 1.3)
  # table-manager cli: -metrics.scale-up-factor
  # metrics_scale_up_factor:

  # Queue length above which we will scale up capacity (default 100000)
  # table-manager cli: -metrics.target-queue-length
  # metrics_target_queue_length:

  # Use metrics-based autoscaling, via this query URL
  # table-manager cli: -metrics.url
  # metrics_url:

  # query to fetch write capacity usage per table (default "sum(rate(cortex_dynamo_
  # consumed_capacity_total{operation="DynamoDB.BatchWriteItem"}[15m])) by (table)
  # > 0")
  # table-manager cli: -metrics.usage-query
  # metrics_usage_query:

  # The heartbeat timeout after which ingesters are skipped for reads/writes.
  # (default 1m0s)
  # table-manager cli: -ring.heartbeat-timeout
  # ring_heartbeat_timeout:

  # Backend storage to use for the ring (consul, inmemory). (default "consul")
  # table-manager cli: -ring.store
  # ring_store:

  # S3 endpoint URL with escaped Key and Secret encoded. If only region is
  # specified as a host, proper endpoint will be deduced. Use inmemory:///<bucket-
  # name> to use a mock in-memory implementation.
  # table-manager cli: -s3.url
  # s3_url:

  # Timeout for graceful shutdowns (default 30s)
  # table-manager cli: -server.graceful-shutdown-timeout
  # server_graceful_shutdown_timeout:

  # gRPC server listen port. (default 9095)
  # table-manager cli: -server.grpc-listen-port
  # server_grpc_listen_port:

  # Idle timeout for HTTP server (default 2m0s)
  # table-manager cli: -server.http-idle-timeout
  # server_http_idle_timeout:

  # HTTP server listen port. (default 80)
  # table-manager cli: -server.http-listen-port
  # server_http_listen_port:

  # Read timeout for HTTP server (default 30s)
  # table-manager cli: -server.http-read-timeout
  # server_http_read_timeout:

  # Write timeout for HTTP server (default 30s)
  # table-manager cli: -server.http-write-timeout
  # server_http_write_timeout:

  # Register the intrumentation handlers (/metrics etc). (default true)
  # table-manager cli: -server.register-instrumentation
  # server_register_instrumentation:

  # Cache config for index entry reading. Enable on-disk cache.
  # table-manager cli: -store.index-cache-read.cache.enable-diskcache
  # store_index_cache_read_cache_enable_diskcache:

  # Cache config for index entry reading. Enable in-memory cache.
  # table-manager cli: -store.index-cache-read.cache.enable-fifocache
  # store_index_cache_read_cache_enable_fifocache:

  # Cache config for index entry reading. The default validity of entries for
  # caches unless overridden.
  # table-manager cli: -store.index-cache-read.default-validity
  # store_index_cache_read_default_validity:

  # Cache config for index entry reading. Path to file used to cache chunks.
  # (default "/var/run/chunks")
  # table-manager cli: -store.index-cache-read.diskcache.path
  # store_index_cache_read_diskcache_path:

  # Cache config for index entry reading. Size of file (bytes) (default 1073741824)
  # table-manager cli: -store.index-cache-read.diskcache.size
  # store_index_cache_read_diskcache_size:

  # Cache config for index entry reading. The expiry duration for the cache.
  # table-manager cli: -store.index-cache-read.fifocache.duration
  # store_index_cache_read_fifocache_duration:

  # Cache config for index entry reading. The number of entries to cache.
  # table-manager cli: -store.index-cache-read.fifocache.size
  # store_index_cache_read_fifocache_size:

  # Cache config for index entry reading. How many chunks to buffer for background
  # write back. (default 10000)
  # table-manager cli: -store.index-cache-read.memcache.write-back-buffer
  # store_index_cache_read_memcache_write_back_buffer:

  # Cache config for index entry reading. How many goroutines to use to write back
  # to memcache. (default 10)
  # table-manager cli: -store.index-cache-read.memcache.write-back-goroutines
  # store_index_cache_read_memcache_write_back_goroutines:

  # Cache config for index entry reading. How many keys to fetch in each batch.
  # table-manager cli: -store.index-cache-read.memcached.batchsize
  # store_index_cache_read_memcached_batchsize:

  # Cache config for index entry reading. How long keys stay in the memcache.
  # table-manager cli: -store.index-cache-read.memcached.expiration
  # store_index_cache_read_memcached_expiration:

  # Cache config for index entry reading. Hostname for memcached service to use
  # when caching chunks. If empty, no memcached will be used.
  # table-manager cli: -store.index-cache-read.memcached.hostname
  # store_index_cache_read_memcached_hostname:

  # Cache config for index entry reading. Maximum number of idle connections in
  # pool. (default 16)
  # table-manager cli: -store.index-cache-read.memcached.max-idle-conns
  # store_index_cache_read_memcached_max_idle_conns:

  # Cache config for index entry reading. Maximum active requests to memcache.
  # (default 100)
  # table-manager cli: -store.index-cache-read.memcached.parallelism
  # store_index_cache_read_memcached_parallelism:

  # Cache config for index entry reading. SRV service used to discover memcache
  # servers. (default "memcached")
  # table-manager cli: -store.index-cache-read.memcached.service
  # store_index_cache_read_memcached_service:

  # Cache config for index entry reading. Maximum time to wait before giving up on
  # memcached requests. (default 100ms)
  # table-manager cli: -store.index-cache-read.memcached.timeout
  # store_index_cache_read_memcached_timeout:

  # Cache config for index entry reading. Period with which to poll DNS for
  # memcache servers. (default 1m0s)
  # table-manager cli: -store.index-cache-read.memcached.update-interval
  # store_index_cache_read_memcached_update_interval:

  # Cache validity for active index entries. Should be no higher than
  # -ingester.max-chunk-idle. (default 5m0s)
  # table-manager cli: -store.index-cache-validity
  # store_index_cache_validity:

  # If true, enables retention deletes of DB tables
  # table-manager cli: -table-manager.retention-deletes-enabled
  # table_manager_retention_deletes_enabled:

  # Tables older than this retention period are deleted. Note: This setting is
  # destructive to data!(default: 0, which disables deletion)
  # table-manager cli: -table-manager.retention-period
  # table_manager_retention_period:

  # If true, disable all changes to DB capacity
  # table-manager cli: -table-manager.throughput-updates-disabled
  # table_manager_throughput_updates_disabled:

  servicemonitor:
    enabled: false
    namespace:
    port: 9090
    labels: {}

  image:
    repository: quay.io/cortexproject/table-manager
    tag: master-89de3b07
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    httpPort: 80
    grpcPort: 9095

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector:

  tolerations:

  affinity:

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  paths: []
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
